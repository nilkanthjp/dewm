var fs = require('fs');
var xml2js = require('xml2js');
var utils = require('dewm-utils');
var paths = require('dewm-paths');
var templates = require('dewm-templates');
var transformations = require('dewm-transformations'); 
var build = {xml:{},html:{},touts:{},elements:{},image:{}};

// "week" is the index of the week in the dewm.weeks object and "i" is the index of the stack in that week. This is the first function that runs when a transformation is set to begin. It then calls a bunch of secondary functions, which eventually return an HTML string that is written to the final output HTML file in this function.
build.init = function(w,i,type,dewm,callback) {
	var week = dewm.weeks[w],
		stack = week.files[i],
		date = dewm.dates.strings[w],
		xmlfile = build.xml.path(week,week.condenet,date,week.stacks[i]),
		//output = type=="danville" ? week.orange+"Digital Danville/" : "/Volumes/MacintoshHD/users/npatel/desktop/test/",
		output = type=="danville" ? week.orange+"Digital Danville/" : week.green,
		html, htmlfile, transform;
	fs.readFile(xmlfile, "utf8", function (err, xml) {
		// Create a folder for the stack in the right directory and then create the HTML file
		htmlfile = build.html.path(output,stack);
		fs.exists(output+stack, function (exists) {
			if (!exists) { fs.mkdir(output+stack,function(err,data){ build.xml.transform(stack,xml,type,output,htmlfile,callback); });} 
			else { build.xml.transform(stack,xml,type,output,htmlfile,callback); };
		});
	});
}

// Function to figure out what the HTML file path should be.
build.html.path = function(output,stack) {
	if (stack.indexOf("7000") == 0) { var htmlfile = output+"HTMLResources/cartoon-carousel/cartoon-data.js"; }
	else { var htmlfile = output+stack+"/"+stack+".html"; }
	return htmlfile;
};

// Function to figure out what the xml file path should be, taking into account exceptions like the Talk and GOAT menus.
build.xml.path = function(week,output,date,stack) {
	if (stack.stack.indexOf("1400") == 0) { var filename = week.stacks[week.files.indexOf("1500_comm_"+date)].xmlfilename+".xml"; }
	else if (stack.stack.indexOf("7000") == 0 || stack.stack.indexOf("0100") == 0) { var filename = date+"gofr_GOAT_front.xml"; }
	else { var filename = stack.xmlfilename+".xml"; };
	return output+filename;
};

// Function to figure out which transformation script to run, running it, and then writing the HTML to the right file.
build.xml.transform = function(stack,xml,type,output,htmlfile,callback) {
	if (stack.indexOf("0100_") == 0) { var transform = build.toc; }
	else { var transform = build.default; };
	transform(xml,output,function(html,xml,response) {
		if (type=="danville") { html = html.replace("<!--insert danville script here-->",templates.danville.scripts).replace("<!--insert caption here-->",templates.danville.caption.replace("<!--insert caption here-->",xml.caption).replace("<!--insert credit here-->",xml.credit)); };
		if (response.status) { fs.writeFile(htmlfile, html); }
		console.log(response.text);
		if (callback) { callback(response); }
	});
};

build.xml.pre = function(xml) {
	// Escape certain fields in the XML that would be parsed incorrectly by xml2js.
	xml=build.xml.escape(xml,["share_email","elementcaption","tout_1","tout_2","tout_3","tout_4","tout_5"]);
	return xml;
};

build.xml.escape = function(xml,tags) {
	for (var j=0; j<tags.length; j++) {
		var tag=tags[j], temp = xml.split("<"+tag+">");
		if (temp.length>1) {
			for (var i=1; i<temp.length; i++) {
				var caption = [ escape(temp[i].split("</"+tag+">")[0]),temp[i].split("</"+tag+">")[1] ];
				temp[i]=caption.join("</"+tag+">");
			};
			xml=temp.join("<"+tag+">");
		};
	};
	return xml;
};

build.xml.post = function(xml,content,output) {
	xml=xml.document,
	xml.content=content;
	xml.output=output;
	xml.shareurls.share_email=unescape(xml.shareurls.share_email);
	if (xml.stackname.indexOf("talk") == 0 || xml.stackname.indexOf("comm") == 0) {
		if (xml.credit.length > 0) { xml.caption+=" "+xml.credit; };
	} else if (xml.stackname.indexOf("crit") == 0) {
		xml.subhead = '<span class="grey">The Critics&nbsp;</span>&nbsp;'+xml.subhead;
	};
	return xml;
};

build.default = function(xml,output,callback) {
	var content=xml.split("<content>")[1].split("</content>")[0]
		xml=build.xml.pre(xml);
	xml2js.parseString(xml, {explicitArray: false}, function (err, result) {
		if (err) { console.log("The XML for the stack is malformed.")}
		else {
			xml=build.xml.post(result,content,output);
			if (xml.image){ build.image.art(xml); }
			transformations.router(xml.stackname)(xml,function(html,response) {callback(html,xml,response);});
		};
	});
};

build.toc = function() {

};

// This function takes the content within the tabletmultimediaextras XML tag of the CondeNet XML (input as a string) and outputs a string formatted as a Javascript object that can then be inserted directly into the HTML
build.touts.init = function(xml) {
	var touts=xml.tabletmultimediaextras, stack=xml.stackname, html = "";
	for (var i=1; i<6; i++) {
		var tout = build.touts.format(touts["tabletextra_"+i],i,stack);
		if (tout.type) { 
			html+=templates.tout
			.replace(/<!--insert type here-->/g,tout.type)
			.replace(/<!--insert text here-->/g,unescape(tout.text))
			.replace(/<!--insert id here-->/g,tout.id)
			.replace(/<!--insert src here-->/g,tout.src);
		};
	};
	return html;
};

build.touts.format = function(tout,i,stack) {
	var date=utils.format.date.stack(stack);
	tout.type = tout["type_"+i].toLowerCase().replace(" ",""), tout.text = tout["tout_"+i], tout.src = tout["ref_"+i], tout.id="", tout.i = i;
	if (tout.type=="video") { if (tout.src.indexOf(date)==-1) { tout.id=tout.src, tout.src="";  } }
	else if (tout.type=="audio") { tout.src="http://downloads.newyorker.com/mp3/"+tout.src+".mp3" }
	else if (tout.type=="slideshow") { tout.src="../HTMLResources/media/"+stack+"/"+stack+"_slideshow.html" };
	return tout;
};

build.elements.init = function(xml) {
	var elements = xml.articleelements.element,
		elementsArray=[];
	if (elements) {
		if (elements.length===undefined) { elements=[elements]; }
		for (i in elements) {
			var element=elements[i],
				type=element.type.split("_")[1];
			elementsArray.push(build.elements[type](element,xml))
		};
	};
	return elementsArray;
};

build.elements.cartoon = function(element,xml) {
	var date = utils.format.date.stack(xml.stackname), stack = xml.stackname;
	build.image.cartoon(date,element.imagename,xml.output);
	// Check if it's an archive toon
	if (element.imagename[0] === "a" && !isNaN(element.imagename[1])) { var html=templates.elements.cartoon.regular; } 
	else { var html=templates.elements.cartoon.archive.replace(/<!--insert archive toon date here-->/g, utils.format.date.archive(element.imagename));; };
	return html
		.replace(/<!--insert a number here-->/g, element.imagename)
		.replace(/<!--insert date here-->/g, date)
		.replace(/<!--insert caption here-->/g, unescape(element.elementcaption));
};

build.elements.spot = function(element,xml) {
	var date = utils.format.date.stack(xml.stackname), stack = xml.stackname;
	build.image.spot(xml,element.imagename,xml.output);
	return templates.elements.spot
		.replace(/<!--insert r number here-->/g, element.imagename)
		.replace(/<!--insert date here-->/g, date)
		.replace(/<!--insert trimmed stackname here-->/g, utils.format.stack.trim(stack));
};

build.elements.art = function(element,xml) {
	var date = utils.format.date.stack(xml.stackname), stack = xml.stackname;
	return templates.elements.art
		.replace(/<!--insert r number here-->/g, element.imagename)
		.replace(/<!--insert date here-->/g, date)
		.replace(/<!--insert stackname here-->/g, stack)
		.replace(/<!--insert caption here-->/g, unescape(element.elementcaption));
};

build.elements.newsbreak = function(element,xml) {
	var date = utils.format.date.stack(xml.stackname), stack = xml.stackname;
	var newsbreakFile = window.condenetDirectory.resolvePath(imagename+".xml");
	var fileStream = new air.FileStream();
	fileStream.open(newsbreakFile, air.FileMode.READ);
	var newsbreakXMLStr = fileStream.readMultiByte(newsbreakFile.size, air.File.systemCharset);
	fileStream.close();
	var newsbreakTitle = newsbreakXMLStr.split("<title>")[1].split("</title>")[0];
	var newsbreakText = newsbreakXMLStr.split("<content>")[1].split("</content>")[0].replace(new RegExp("paragraph>", 'g'), "p>");
	var newsbreakSub = newsbreakXMLStr.split("<summary>")[1].split("</summary>")[0];
	var currentElementHTML = window.newsbreakTemplate.replace("<!--insert newsbreak title here-->",newsbreakTitle).replace("<!--insert newsbreak text here-->",newsbreakText).replace("<!--insert newsbreak sub here-->",newsbreakSub);
	return templates.elements.newsbreak;
};

// Sprinkle elements into the HTML
build.elements.insert = function(content,elements) {
	if (elements[elements.length-1].indexOf('class="newsbreak"')>-1) {content+="\n\t\t"+elements[elements.length-1]; elements.splice(-1,1);};
	var count = elements.length,
		spacing = content.length/(count+1);
	for (var i=1; i<=elements.length; i++) {
		var html = "\r\r\t\t"+elements[i-1].replace(/\n/g,"\r").replace(/\t\t/g,"\t\t\t\t")+"\r",
			slice = content.slice((i-1)*spacing,i*spacing),
			paragraphs = content.match(/<\/p>/g);
		if (paragraphs.length == 0) { var index=i*spacing; }
		else { var index=(i-1)*spacing+slice.lastIndexOf("</p>"); }
		content=content.splice(index+4,0,html);
	};
	return content;
 };

build.toolbox = function(xml,touts) {
	// Construct the piece's toolbox, beginning with the Share URLs
	return templates.toolbox
		.replace("<!--insert facebook here-->",xml.shareurls.share_facebook)
		.replace("<!--insert twitter here-->",xml.shareurls.share_twitter)
		.replace("<!--insert email here-->",xml.shareurls.share_email)
		.replace("<!--insert bitly here-->",xml.shareurls.share_bitly)
		.replace("<!--insert touts here-->",touts);
};

var transformGoatContent = function(theCondeNetXMLText,stackName) {
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));
	danvilleHTML = danvilleHTML.replace(new RegExp('Goings on About Town', 'g'), 'Goings On About Town');
	
	// Quick fix to make sure the style of li for short lists is "short-list"
	var rgxp = new RegExp('<paragraph>\r\t\t\t<!--goatcategory-->\r\t\t\t<bold>.*SHORT LIST', 'g');
    danvilleHTML.replace(rgxp, function(match, word) {
         return '</li>\n\n<li class="short-list">\r\t\t<a href="#" class="listings-toggle"></a>\r\t\t<header class="listings-toggle">\r\t\t\t<h2 class="ellipsis">'+match;
    });

	danvilleHTML = danvilleHTML.replace(new RegExp('<header>', 'g'), '<header class="listings-toggle">');
	danvilleHTML = danvilleHTML.replace(new RegExp('&#160;<span class="dingbat">&#9830;</span>', 'g'), '');

	danvilleHTML = danvilleHTML.replace(new RegExp("OF NOTE  ", 'g'), "<span class='red'>OF NOTE </span> ");
	danvilleHTML = danvilleHTML.replace(new RegExp("OF NOTE ", 'g'), "<span class='red'>OF NOTE </span> ");
	
	// Extra transformations for specific sections
	if (stackName.indexOf("movies") > 0) {
		danvilleHTML = danvilleHTML.replace(new RegExp('<header>', 'g'), '<header class="listings-toggle">');
	} else if (stackName.indexOf("dance") > 0 || stackName.indexOf("above") > 0) {
		danvilleHTML = danvilleHTML.replace(new RegExp('<li>', ''), '<li class="open">');
	} else if (stackName.indexOf("theatre") > 0) {
		danvilleHTML = danvilleHTML.replace(new RegExp('<h2 class="ellipsis">ALSO PLAYING</h2>', 'g'), '<h2 class="ellipsis">ALSO NOTABLE</h2>');
	}

	return danvilleHTML;
}


// This function checks to see whether the poem has audio, and if so, generates the javascript to add to the HTML file for it.
var generatePoemAudioToolbox = function(toutsXML) {
	var finalTouts = "";
	var type = $(toutsXML).find("type_1").text();
	if (type.length > 0) {
		var src = $(toutsXML).find("ref_1").text();
		finalTouts = '\n\t\twindow.tnyAudio = {\n\t\t"src":"http://downloads.newyorker.com/mp3/'+src+'.mp3",\n\t\t"label" : "Read by the author.",\n\t\t"el" : "#poem-audio"\n\t};\n\t\t';
	}
	return finalTouts;
}

var generateTalkStoriesHTML = function(talkStories) {
	var talkStoriesHTML = "";
	for (var i=0, len=talkStories.length; i<len; i++) {
		// Read content of the CondeNet XML file for this talk story into a variable "condeNetXMLStr"
		var condeNetXML = window.condenetDirectory.resolvePath(talkStories[i]+".xml");
		var fileStream = new air.FileStream();
		fileStream.open(condeNetXML, air.FileMode.READ);
		var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
		fileStream.close();
	
		// Use built-in javascript parser to format the CondeNetXML
		var parser = new DOMParser();
		var XML = parser.parseFromString(condeNetXMLStr,"text/xml");
		var danville = new Object();
		
		// Use getXMLTagInfo function (which can be found under "utility functions" in main.js) to grab various pieces
		var title = getXMLTagInfo(XML,"title");
		var rubric = getXMLTagInfo(XML,"subhead");
		var author = getXMLTagInfo(XML,"author");
		var stackName = getXMLTagInfo(XML,"stackname");
		
		var currentTalkStoryHTML = templates.stacks.talk.opener.story.replace(new RegExp("<!--insert title here-->", 'g'), title);
		currentTalkStoryHTML = currentTalkStoryHTML.replace(new RegExp("<!--insert rubric here-->", 'g'), rubric);
		currentTalkStoryHTML = currentTalkStoryHTML.replace(new RegExp("<!--insert author here-->", 'g'), author);
		currentTalkStoryHTML = currentTalkStoryHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stackName);
		
		talkStoriesHTML = talkStoriesHTML+currentTalkStoryHTML;
	}	
	return talkStoriesHTML;
}

build.image.copy = function(file) {
	fs.exists(file.from, function(exists) { 
		if (exists) { 
			fs.exists(file.to,function (exists) {
				if(exists) { fs.createReadStream(file.from).pipe(fs.createWriteStream(file.to+file.filename)); }
				else { fs.mkdir(file.to,function(err,data){ fs.createReadStream(file.from).pipe(fs.createWriteStream(file.to+file.filename)); }); 00};
			});
		} else { console.log("File for "+file.filename+" "+file.type+" image does not exist.") }; 
	});
};

build.image.path = function(from,size,filename) {
	return from+size+"/"+filename;
};

build.image.art = function(xml,to) {
	var date = utils.format.date.stack(xml.stackname),
		from = paths.npp.replace("<!--year-->","20"+date.slice(0,2)).replace("<!--month-->",date.slice(2,4)).replace("<!--day-->",date.slice(4,6))
		to = xml.output,
		filename = date+"_"+xml.image,
		trimmed = utils.format.stack.trim(xml.stackname),
		files = [
			{from:build.image.path(from,2560,filename+".jpg"), type:"full tablet", to:to+"HTMLResources/media/"+trimmed+"/", filename:date+"_"+xml.image+".jpg"},
			{from:build.image.path(from,640,filename+"_crop.jpg"), type:"mobile crop", to:to+"HTMLResources/media/"+trimmed+"/", filename:date+"_"+xml.image+"_crop.jpg"},
			{from:build.image.path(from,140,filename+"_cropth.png"), type:"thumbnail", to:to+xml.stackname+"/", filename:"toc.png"}
		];
	if (xml.stackname.indexOf("_poem_")>-1) { files[2].from=paths.poem; };
	for (var i=0; i<files.length; i++) {
		build.image.copy(files[i]);
	};
};

build.image.cartoon = function(date,toon,to) {
	var from = paths.npp.replace("<!--year-->","20"+date.slice(0,2)).replace("<!--month-->",date.slice(2,4)).replace("<!--day-->",date.slice(4,6)),
		filename = date+"_"+toon+".jpg",
		file = {from:build.image.path(from,2560,filename), type:"cartoon", to:to+"HTMLResources/media/cartoons/", filename:date+"_"+toon+".jpg"};
		build.image.copy(file);
};

build.image.spot = function(xml,spot,to) {
	var date = utils.format.date.stack(xml.stackname), trimmed = utils.format.stack.trim(xml.stackname),
		from = paths.npp.replace("<!--year-->","20"+date.slice(0,2)).replace("<!--month-->",date.slice(2,4)).replace("<!--day-->",date.slice(4,6)),
		filename = date+"_"+spot+".jpg",
		file = {from:build.image.path(from,2560,filename), type:"spot", to:to+"HTMLResources/media/"+trimmed+"/", filename:date+"_"+spot+".jpg"};
		build.image.copy(file);
};

module.exports = build;