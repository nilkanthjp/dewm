// This is the first function that runs when a transformation is set to begin. It then calls a bunch of secondary functions, which eventually return an HTML string that is written to the final output HTML file in this function
function transformToHTML(stackName,xmlName,rootDirectory) {
	// Read content of the CondeNet XML file for this stack into a variable "condeNetXMLStr"
	if (stackName.indexOf("1400") == 0) {
		xmlName = window.xmlNames[window.stackNames.indexOf("1500_comm_"+theDate)];
	} else if (stackName.indexOf("7000") == 0) {
		xmlName = theDate+"gofr_GOAT_front";
	} else if (stackName.indexOf("0100") == 0) {
		xmlName = theDate+"gofr_GOAT_front";
	}

	var condeNetXML = window.condenetDirectory.resolvePath(xmlName+".xml");
	var fileStream = new air.FileStream();
	fileStream.open(condeNetXML, air.FileMode.READ);
	var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
	fileStream.close();
	
	// Create a folder for the stack in the Tablet (Orange) > Date > Digital Danville folder, copy the CondeNet XML file there, and rename it to be an HTML file
	var source = condeNetXML;
	if (stackName.indexOf("7000") == 0) {
		var target = rootDirectory.resolvePath("HTMLResources/cartoon-carousel/cartoon-data.js");
	} else {
		if (rootDirectory.nativePath.indexOf("TNYTablet") == -1) {
			var target = rootDirectory.resolvePath(stackName+"/"+stackName+".html");
		} else {
			var target = rootDirectory.resolvePath(stackName+"/"+stackName+".html");
		}
	}
	var targetParent = target.parent;
	targetParent.createDirectory();
	source.copyTo(target, true);
	
	// Run the condeNetXMLStr variable text through another function (found below) to transform it into the Danville HTML and then write that new variable's text into the newly generated HTML file
	var fileStream = new air.FileStream();
	fileStream.open(target, air.FileMode.WRITE);
	if (stackName.indexOf("0100_") != 0) {
		transformTextToHTML(condeNetXMLStr,stackName,rootDirectory,function(danvilleHTML) {     
			if (rootDirectory.nativePath.indexOf("TNYTablet") == -1 && stackName.indexOf("_poem_") == -1) {
				danvilleHTML = danvilleHTML.replace("<!--insert danville script here-->",'<script src="../HTMLResources/production/js/spellcheck2.js"></script>\n<script src="../HTMLResources/production/js/dictionary4.js"></script>\n<script>spellcheckThis();</script>\n<style>\n\t.underline {\n\t\tborder-bottom:1px dotted red;\n\t}</style>');
			}
			fileStream.writeUTFBytes(danvilleHTML);
			fileStream.close();
		
			$("#popup").toggle();
			refreshStatus();
		});	
	} else {
		transformTOCToHTML(condeNetXMLStr,stackName,rootDirectory,function(danvilleHTML) {     
			if (rootDirectory.nativePath.indexOf("TNYTablet") == -1 && stackName.indexOf("_poem_") == -1) {
				danvilleHTML = danvilleHTML.replace("<!--insert danville script here-->",'<script src="../HTMLResources/production/js/spellcheck2.js"></script>\n<script src="../HTMLResources/production/js/dictionary4.js"></script>\n<script>spellcheckThis();</script>\n<style>\n\t.underline {\n\t\tborder-bottom:1px dotted red;\n\t}</style>');
			}
			fileStream.writeUTFBytes(danvilleHTML);
			fileStream.close();
		
			$("#popup").toggle();
			refreshStatus();
		});
	}

}

// Note that all of these transform functions can be found in stacks.js
function transformTextToHTML(condeNetXMLStr,stackName,rootDirectory,callback) {
	// Use built-in javascript parser to format the CondeNetXML
	var parser = new DOMParser();
	var XML = parser.parseFromString(condeNetXMLStr,"text/xml");
	var danville = new Object();

	// Use getXMLTagInfo function (which can be found under "utility functions" in main.js) to grab various pieces
	danville.Title = getXMLTagInfo(XML,"title");
	danville.Stackname = getXMLTagInfo(XML,"stackname");
	danville.Rubric = getXMLTagInfo(XML,"subhead");
	danville.Author = getXMLTagInfo(XML,"author");
	danville.Image = getXMLTagInfo(XML,"image");
	danville.Caption = getXMLTagInfo(XML,"caption");
	danville.Credit = getXMLTagInfo(XML,"credit");
	danville.Gutter = getXMLTagInfo(XML,"guttercredit");
	danville.CreditType = getXMLTagInfo(XML,"imagetype");
	danville.Spot = getXMLTagInfo(XML,"spot");
	danville.Facebook = condeNetXMLStr.split("<share_facebook>")[1].split("</share_facebook>")[0];
	danville.Twitter = condeNetXMLStr.split("<share_twitter>")[1].split("</share_twitter>")[0];
	danville.Email = condeNetXMLStr.split("<share_email>")[1].split("</share_email>")[0];
	danville.Bitly = condeNetXMLStr.split("<share_bitly>")[1].split("</share_bitly>")[0];
	danville.Filename = getXMLTagInfo(XML,"filename");
	if (condeNetXMLStr.indexOf("<summary>") > 0) {
		danville.Deck = condeNetXMLStr.split("<summary>")[1].split("</summary>")[0];
	} else {
		danville.Deck = "";
	}
	
	if (stackName.indexOf("dept") > 0 || stackName.indexOf("fiction") > 0 || stackName.indexOf("crit") > 0) {
		var finalHTML = transformDept(condeNetXMLStr,stackName,window.deptTemplate,danville,rootDirectory,function(finalHTML) { callback(finalHTML); });
	} else if (stackName.indexOf("cont") > 0) {
		var finalHTML = transformContribs(condeNetXMLStr,stackName,window.contributorsTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("mail") > 0) {
		var finalHTML = transformMail(condeNetXMLStr,stackName,window.mailTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("goat") > 0) {
		var finalHTML = transformGoat(condeNetXMLStr,stackName,window.goatHeaderTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("talk") > 0 || stackName.indexOf("comm") > 0) {
		var finalHTML = transformTalk(condeNetXMLStr,stackName,window.talkTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("shouts") > 0) {
		var finalHTML = transformShouts(condeNetXMLStr,stackName,window.shoutsTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("poem") > 0) {
		var finalHTML = transformPoem(condeNetXMLStr,stackName,window.poemTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("back_page") > 0) {
		var finalHTML = transformBackPage(condeNetXMLStr,stackName,template,danville,rootDirectory);
	} else if (stackName.indexOf("sidebar") > 0) {
		var finalHTML = transformShouts(condeNetXMLStr,stackName,window.shoutsTemplate,danville,rootDirectory);
	} else if (stackName.indexOf("cartoons") > 0) {
		var finalHTML = transformCartoons(condeNetXMLStr,stackName,danville,rootDirectory);
	}
	
	if (stackName.indexOf("dept") < 0 && stackName.indexOf("fiction") < 0 && stackName.indexOf("crit") < 0) {
		callback(finalHTML);
	}
}

function displayDanvilleHTML(stackName) {
	window.currentDanvilleStackstackName = stackName;
	$("#danvilleHTMLViewer").attr("src","file:///Volumes/TNY/Edit/Groups/Tablet/"+theDateWithDashes+"/Digital%20Danville/"+stackName+"/"+stackName+".html");
	refreshCurrentStackComments();
	$("#copyComments").show();
	$("#danvilleHTMLViewerExit").show();
	
	// Make sure right check boxes are checked
	if (window.copyCommentsFileJSON[window.currentDanvilleStackstackName] != undefined) {
		if (copyStatus = window.copyCommentsFileJSON[window.currentDanvilleStackstackName].checkStatus != undefined && window.copyCommentsFileJSON[window.currentDanvilleStackstackName].checkStatus) {
			$('#copyComments #approve #checkboxApproved').attr('checked','checked');
		} else {
			$('#copyComments #approve #checkboxApproved').removeAttr('checked');
		}
		if (copyStatus = window.copyCommentsFileJSON[window.currentDanvilleStackstackName].fixesStatus != undefined && window.copyCommentsFileJSON[window.currentDanvilleStackstackName].fixesStatus) {
			$('#copyComments #approve #checkboxFixes').attr('checked','checked');
		} else {
			$('#copyComments #approve #checkboxFixes').removeAttr('checked');
		}
	}
	
}

// This function performs the usual transformations on the paragraphs within the <content> tag to format them for digital editions
function transformContent(theCondeNetXMLText,stackName) {
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));
	danvilleHTML = danvilleHTML.replace(new RegExp("<paragraph", 'g'), "<p");
	danvilleHTML = danvilleHTML.replace(new RegExp("</paragraph", 'g'), "</p");
	danvilleHTML = danvilleHTML.replace(new RegExp("</line>\r</p>", 'g'), "</line>\r</blockquote>");
	danvilleHTML = danvilleHTML.replace(new RegExp("</line>\n    </p>", 'g'), "</line>\r    </blockquote>");
	danvilleHTML = danvilleHTML.replace(new RegExp('<line class="noindent">', 'g'), '<line class="no-indent">');
	danvilleHTML = danvilleHTML.replace(new RegExp("<bold>", 'g'), "<strong>");
	danvilleHTML = danvilleHTML.replace(new RegExp("</bold>", 'g'), "</strong>");
	danvilleHTML = danvilleHTML.replace(new RegExp("<italic>", 'g'), "<em>");
	danvilleHTML = danvilleHTML.replace(new RegExp("</italic>", 'g'), "</em>");
	danvilleHTML = danvilleHTML.replace(new RegExp("<dingbat /></p>", 'g'), "<smallcaps>&#9830;</smallcaps></p>");
	danvilleHTML = danvilleHTML.replace(new RegExp("i>", 'g'), "em>");
	danvilleHTML = danvilleHTML.replace(new RegExp("“", 'g'), "&#8220;");
	danvilleHTML = danvilleHTML.replace(new RegExp("”", 'g'), "&#8221;");
	danvilleHTML = danvilleHTML.replace(new RegExp("&#8217; &#8221;", 'g'), "&#8217;&#160;&#8221;");
	danvilleHTML = danvilleHTML.replace(new RegExp("<line>", 'g'), "<p>");
	danvilleHTML = danvilleHTML.replace(new RegExp("    </p>", 'g'), "    </blockquote>");
	danvilleHTML = danvilleHTML.replace(new RegExp("e-mail", 'g'), "e&#8209;mail");
	danvilleHTML = danvilleHTML.replace(new RegExp('class="noindent"', 'g'), 'class="no-indent"');
	danvilleHTML = danvilleHTML.replace(new RegExp('noindent', 'g'), 'no-indent');
	danvilleHTML = danvilleHTML.replace(new RegExp('<p class="pullout">', 'g'), "<blockquote>");
	danvilleHTML = danvilleHTML.replace(new RegExp('T-shirt', 'g'), "T&#8209;shirt");
	danvilleHTML = danvilleHTML.replace(new RegExp('t-shirt', 'g'), "t&#8209;shirt");
	danvilleHTML = danvilleHTML.replace(new RegExp('<p><center>', 'g'), '<p class="translation">');
	danvilleHTML = danvilleHTML.replace(new RegExp('</center></p>', 'g'), '</p>');
	
	return danvilleHTML;
}

function transformGoatContent(theCondeNetXMLText,stackName) {
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));
	danvilleHTML = danvilleHTML.replace(new RegExp('Goings on About Town', 'g'), 'Goings On About Town');
	
	// Quick fix to make sure the style of li for short lists is "short-list"
	var rgxp = new RegExp('<paragraph>\r\t\t\t<!--goatcategory-->\r\t\t\t<bold>.*SHORT LIST', 'g');
    danvilleHTML.replace(rgxp, function(match, word) {
         return '</li>\n\n<li class="short-list">\r\t\t<a href="#" class="listings-toggle"></a>\r\t\t<header class="listings-toggle">\r\t\t\t<h2 class="ellipsis">'+match;
    });

	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>\r<!--goatcategory-->\r<bold>', 'g'), '</li>\n\n<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header class="listings-toggle">\r\t\t<h2 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>\r<!-- goatcategory -->\r<bold>', 'g'), '</li>\n\n<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header class="listings-toggle">\r\t\t<h2 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph><!-- goatcategory -->\r<bold>', 'g'), '</li>\n\n<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header class="listings-toggle">\r\t\t<h2 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph><!--goatcategory-->\r<bold>', 'g'), '</li>\n\n<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header class="listings-toggle">\r\t\t<h2 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>\r\t\t\t<!--goatcategory-->\r\t\t\t<bold>', 'g'), '</li>\n\n<li class="expandable">\r\t\t<a href="#" class="listings-toggle"></a>\r\t\t<header class="listings-toggle">\r\t\t\t<h2 class="ellipsis">');
	
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold>\r<!--goatcategory-->\r</paragraph>', 'g'), '</h2>\r\t</header>');
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold>\r<!-- /goatcategory -->\r</paragraph>', 'g'), '</h2>\r\t</header>');
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold><!-- /goatcategory -->\r</paragraph>', 'g'), '</h2>\r\t</header>');
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold><!--/goatcategory-->\r</paragraph>', 'g'), '</h2>\r\t</header>');
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold>\r\t\t\t<!--/goatcategory-->\r\t\t</paragraph>', 'g'), '</h2>\r\t\t\t</header>');
	
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>\r<!--goatTitle-->\r<bold>', 'g'), '\t<section>\r\t\t<h3 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>\r<!-- goatTitle -->\r<bold>', 'g'), '\t<section>\r\t\t<h3 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph><!--goatTitle-->\r<bold>', 'g'), '\t<section>\r\t\t<h3 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph><!-- goatTitle -->\r<bold>', 'g'), '\t<section>\r\t\t<h3 class="ellipsis">');
	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>\r\t\t\t<!--goatTitle-->\r\t\t\t<bold>', 'g'), '<section>\r\t\t\t<h3 class="ellipsis">');

	danvilleHTML = danvilleHTML.replace(new RegExp('</bold>\r<!--/goatTitle-->\r</paragraph>', 'g'), "</h3>");
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold>\r<!-- /goatTitle -->\r</paragraph>', 'g'), "</h3>");
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold><!--/goatTitle-->\r</paragraph>', 'g'), "</h3>");
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold><!-- /goatTitle -->\r</paragraph>', 'g'), "</h3>");
	danvilleHTML = danvilleHTML.replace(new RegExp('</bold>\r\t\t\t<!--/goatTitle-->\r\t\t</paragraph>', 'g'), "\t\t\t</h3>");

	danvilleHTML = danvilleHTML.replace(new RegExp('<paragraph>', 'g'), "\t\t<p>");
	danvilleHTML = danvilleHTML.replace(new RegExp('</paragraph>', 'g'), "</p>\r\t</section>");
	
	danvilleHTML = danvilleHTML.replace(new RegExp('<p><italic>', 'g'), "<section><p><em>");
	danvilleHTML = danvilleHTML.replace(new RegExp('</italic></p>', 'g'), "</em></p></section>");
	
	danvilleHTML = danvilleHTML.replace(new RegExp("italic>", 'g'), "em>");
	
	danvilleHTML = danvilleHTML.replace(new RegExp('bold>', 'g'), "strong>");
	danvilleHTML = danvilleHTML.replace(new RegExp("&#160;<dingbat />", 'g'), "");
	danvilleHTML = danvilleHTML.replace(new RegExp("OF NOTE  ", 'g'), "<span class='red'>OF NOTE </span> ");
	danvilleHTML = danvilleHTML.replace(new RegExp("OF NOTE ", 'g'), "<span class='red'>OF NOTE </span> ");
	
	// Extra transformations for specific sections
	if (stackName.indexOf("movies") > 0) {
		danvilleHTML = danvilleHTML.replace('<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">Openings','<li class="expandable no-rule">\r\t<a href="#" class="listings-toggle"></a>\t\r<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">Openings');
		danvilleHTML = danvilleHTML.replace(new RegExp('</header>\r\t\t<p>', 'g'), '</header>\r\t<section>\r\t\t<p><strong>');
		danvilleHTML = danvilleHTML.replace(new RegExp('</header>\r\r\t\t<p>', 'g'), '</header>\r\t<section>\r\t\t<p><strong>');
		danvilleHTML = danvilleHTML.replace(new RegExp('</p>\r\t</section>\r\t\t<p>', 'g'), '</p>\r\t\t<p><strong>');
		danvilleHTML = danvilleHTML.replace(new RegExp('</header>\r\t<section>\r\t\t<p><strong>\r<em>Titles in bold are reviewed.</em>\r</p>', 'g'), '\t<p><em>Titles in bold are reviewed.</em></p>\r\t</header>');
		danvilleHTML = danvilleHTML.replace(new RegExp(': In ', 'g'), '</strong>: In ');
		danvilleHTML = danvilleHTML.replace(new RegExp('<strong><strong>', 'g'), '<strong>');	
		danvilleHTML = danvilleHTML.replace(new RegExp('<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">OPENING', 'g'), '<li class="expandable short-list no-rule">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">OPENING');
		danvilleHTML = danvilleHTML.replace(new RegExp('<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">Revivals', 'g'), '<li class="expandable short-list no-rule">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">Revivals');
		danvilleHTML = danvilleHTML.replace(new RegExp('<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">ALSO PLAYING', 'g'), '<li class="expandable short-list">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">ALSO PLAYING');
		danvilleHTML = danvilleHTML.replace(new RegExp('</li>\n\n<li class="expandable short-list">\n\t<a href="#" class="listings-toggle"></a>\n\t<header>\n\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">ALSO PLAYING</a></h2 class="ellipsis">', 'g'), '<header>\n\t\t<h2 class="ellipsis"><a href="#" class="header-listings-toggle">ALSO PLAYING</a></h2 class="ellipsis">');
	} else if (stackName.indexOf("dance") > 0) {
		danvilleHTML = '<li class="expandable open">\r'+danvilleHTML;
	} else if (stackName.indexOf("art") > 0) {
		danvilleHTML = danvilleHTML.replace(new RegExp('</h3>\r\t<section>\r\t\t<h3>', 'g'), '</h3>\r\t\t<h3 class="grey">');
		danvilleHTML = danvilleHTML.replace(new RegExp('</p>\r\t</section>\r\t\t<p>', 'g'), '</p>\r\t\t<p>');
		danvilleHTML = danvilleHTML.replace(new RegExp('</p>\r\t</section>\r\t\t<p>', 'g'), '</p>\r\t\t<p>');
	} else if (stackName.indexOf("above") > 0) {
		danvilleHTML = '<li class="expandable open">\r'+danvilleHTML;
		danvilleHTML = danvilleHTML.replace(new RegExp('<section>\r\t\t<h3>Auctions and Antiques</h3>', 'g'), '</li>\r\r\t<li class="expandable">\r\t<a href="#" class="listings-toggle"></a>\r\t<header>\r\t\t<h2><a href="#" class="header-listings-toggle">Auctions and Antiques</a></h2>\r\t</header>\r\t<section>');
	} else if (stackName.indexOf("theatre") > 0) {
		danvilleHTML = danvilleHTML.replace(new RegExp('<h2 class="ellipsis">ALSO PLAYING</h2>', 'g'), '<h2 class="ellipsis">ALSO NOTABLE</h2>');
	}

	return danvilleHTML;
}

// This function takes the content within the tabletmultimediaextras XML tag of the CondeNet XML (input as a string) and outputs a string formatted as a Javascript object that can then be inserted directly into the HTML
function generateToutsObject(toutsXML,stackName) {
	var finalTouts = "";
	for (var f=1; f<6; f++) {
		var type = $(toutsXML).find("type_"+f).text();
		if (type.length > 0) {
			var text = toutsXML.split("<tout_"+f+">")[1].split("</tout_"+f+">")[0];
			var src = toutsXML.split("<ref_"+f+">")[1].split("</ref_"+f+">")[0];
			if (f == 1) {
				if (type.toLowerCase() == "video") {
					if (src.indexOf(theDate) == 0) {
						finalTouts = finalTouts+'\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "videoId":"'+src+'", "src":""}';
					} else {
						finalTouts = finalTouts+'\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "videoId":"", "src":"'+src+'"}';
					}
				} else if (type.toLowerCase() == "slide show") {	
					finalTouts = finalTouts+'\t\t\t{"type":"slideshow", "text":"'+text+'", "src":"../HTMLResources/media/'+stripStackNumber(stackName)+'/'+stripStackNumber(stackName)+'_slideshow.html"}';
				} else if (type.toLowerCase() == "audio") {	
					finalTouts = finalTouts+'\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "src":"http://downloads.newyorker.com/mp3/'+src+'.mp3"}';
				} else {	
					finalTouts = finalTouts+'\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "src":"'+src+'"}';
				}
			} else {
				if (type.toLowerCase() == "video") {
					if (src.indexOf(theDate) == 0) {
						finalTouts = finalTouts+',\n\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "videoId":"'+src+'", "src":""}';
					} else {
						finalTouts = finalTouts+',\n\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "videoId":"", "src":"'+src+'"}';
					}
				} else if (type.toLowerCase() == "slide show") {	
					finalTouts = finalTouts+',\n\t\t\t{"type":"slideshow", "text":"'+text+'", "src":"../HTMLResources/media/'+stripStackNumber(stackName)+'/'+stripStackNumber(stackName)+'_slideshow.html"}';
				} else if (type.toLowerCase() == "audio") {	
					finalTouts = finalTouts+',\n\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "src":"http://downloads.newyorker.com/mp3/'+src+'.mp3"}';
				} else {	
					finalTouts = finalTouts+',\n\t\t\t{"type":"'+type.toLowerCase()+'", "text":"'+text+'", "src":"'+src+'"}';
				}
			}
		}
	}
	return finalTouts;
}

// This function takes the content within the articleelements XML tag of the CondeNet XML (input as a string) and outputs a Javascript array with elements that are HTML strings formatted to be inserted into the final HTML
function generateElementsObject(elementsXML,danvilleImage,stackname,rootDirectory) {
	var finalElements = [];
	$(elementsXML).find("imagename").each(function(index) {
		if ($(this).text().toLowerCase() != danvilleImage) {
			currentElementHTML = "";
			var imagename = $(this).text().toLowerCase();
			var imagetype = $(elementsXML).find("type")[index].textContent;
			if (imagetype == "element_cartoon") {
				if (imagename.indexOf("a1") != 0) {
					var currentElementHTML = window.cartoonArchiveTemplate;
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert a number here-->", 'g'), imagename);
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert date here here-->", 'g'), theDate);
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert caption here-->", 'g'), $(elementsXML).find("elementcaption")[index].textContent.replace("ÔªøÔªøÔªø“","&#8220;").replace("”ÔªøÔªø","&#8221;"));
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert archive toon date here-->", 'g'), getArchiveDate(imagename));
				} else {
					var currentElementHTML = window.cartoonTemplate;
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert a number here-->", 'g'), imagename);
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert date here here-->", 'g'), theDate);
					currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert caption here-->", 'g'), $(elementsXML).find("elementcaption")[index].textContent.replace("ÔªøÔªøÔªø“","&#8220;").replace("”ÔªøÔªø","&#8221;"));
				}
				if (copyImage(imagename,stackname,"cartoon",rootDirectory) == 0) {
					currentElementHTML = currentElementHTML.replace(new RegExp('../HTMLResources/media/cartoons/'+theDate+'_'+imagename+'.jpg'), "http://dummyimage.com/600x400/000/fff&text=cartoon+tk");
				}
			} else if (imagetype == "element_spot") {
				var currentElementHTML = window.spotTemplate;
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert r number here-->", 'g'), imagename);
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stripStackNumber(stackname));
				if (copyImage(imagename,stackname,"spot",rootDirectory) == 0) {
					//currentElementHTML = currentElementHTML.replace(new RegExp('../HTMLResources/media/'+stripStackNumber(stackname)+'/'+theDate+'_'+imagename+'.jpg'), "http://dummyimage.com/300x200/000/fff&text=spot+tk");
				}
			} else if (imagetype == "element_art") {
				var currentElementHTML = window.artTemplate;
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert r number here-->", 'g'), imagename);
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stripStackNumber(stackname));
				currentElementHTML = currentElementHTML.replace(new RegExp("<!--insert caption here-->", 'g'), $(elementsXML).find("elementcaption")[index].textContent);
				copyImage(imagename,stackname,"generic",rootDirectory)
			} else if (imagetype == "element_newsbreak") {
				var newsbreakFile = window.condenetDirectory.resolvePath(imagename+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(newsbreakFile, air.FileMode.READ);
				var newsbreakXMLStr = fileStream.readMultiByte(newsbreakFile.size, air.File.systemCharset);
				fileStream.close();
				var newsbreakTitle = newsbreakXMLStr.split("<title>")[1].split("</title>")[0];
				var newsbreakText = newsbreakXMLStr.split("<content>")[1].split("</content>")[0].replace(new RegExp("paragraph>", 'g'), "p>");
				var newsbreakSub = newsbreakXMLStr.split("<summary>")[1].split("</summary>")[0];
				var currentElementHTML = [window.newsbreakTemplate.replace("<!--insert newsbreak title here-->",newsbreakTitle).replace("<!--insert newsbreak text here-->",newsbreakText).replace("<!--insert newsbreak sub here-->",newsbreakSub)];
			}
			finalElements.push(currentElementHTML);
		}
	});
	return finalElements;
}

// This function checks to see whether the poem has audio, and if so, generates the javascript to add to the HTML file for it.
function generatePoemAudioToolbox(toutsXML) {
	var finalTouts = "";
	var type = $(toutsXML).find("type_1").text();
	if (type.length > 0) {
		var src = $(toutsXML).find("ref_1").text();
		finalTouts = '\n\t\twindow.tnyAudio = {\n\t\t"src":"http://downloads.newyorker.com/mp3/'+src+'.mp3",\n\t\t"label" : "Read by the author.",\n\t\t"el" : "#poem-audio"\n\t};\n\t\t';
	}
	return finalTouts;
}

function generateTalkStoriesHTML(talkStories) {
	var talkStoriesHTML = "";
	for (var i=0; i<talkStories.length; i++) {
		// Read content of the CondeNet XML file for this talk story into a variable "condeNetXMLStr"
		var condeNetXML = window.condenetDirectory.resolvePath(talkStories[i]+".xml");
		var fileStream = new air.FileStream();
		fileStream.open(condeNetXML, air.FileMode.READ);
		var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
		fileStream.close();
	
		// Use built-in javascript parser to format the CondeNetXML
		var parser = new DOMParser();
		var XML = parser.parseFromString(condeNetXMLStr,"text/xml");
		var danville = new Object();
		
		// Use getXMLTagInfo function (which can be found under "utility functions" in main.js) to grab various pieces
		var title = getXMLTagInfo(XML,"title");
		var rubric = getXMLTagInfo(XML,"subhead");
		var author = getXMLTagInfo(XML,"author");
		var stackName = getXMLTagInfo(XML,"stackname");
		
		var currentTalkStoryHTML = window.talkOpenerTalkTemplate.replace(new RegExp("<!--insert title here-->", 'g'), title);
		currentTalkStoryHTML = currentTalkStoryHTML.replace(new RegExp("<!--insert rubric here-->", 'g'), rubric);
		currentTalkStoryHTML = currentTalkStoryHTML.replace(new RegExp("<!--insert author here-->", 'g'), author);
		currentTalkStoryHTML = currentTalkStoryHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stackName);
		
		talkStoriesHTML = talkStoriesHTML+currentTalkStoryHTML;
	}	
	return talkStoriesHTML;
}

// Use Adobe Air to find the associated opener image and copy it to the 'images' directory inside of the Digital Danville > stack folder
function copyImage(imagename,stackName,size,rootDirectory) {
	var originalStackName = stackName;
	stackName = stripStackNumber(stackName);
	var layoutStatus = 0;
	if (size == "cartoon") {
		var sourceImage = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/2560/"+theDate+"_"+imagename+".jpg");	
		var targetImage = rootDirectory.resolvePath("HTMLResources/media/cartoons/"+theDate+"_"+imagename+".jpg");
		var targetImagesParent = targetImage.parent;
		targetImagesParent.createDirectory();
		try { 
			sourceImage.copyTo(targetImage, true);
		} catch(err) {
			alert("Couldn't find the size file for cartoon "+imagename);
		}
	} else if (size == "spot" || size == "generic") {
		var sourceImage = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/2560/"+theDate+"_"+imagename+".jpg");	
		var targetImage = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+".jpg");
		var targetImagesParent = targetImage.parent;
		targetImagesParent.createDirectory();
		try {	
			sourceImage.copyTo(targetImage, true);
		} catch(err) {
			alert("Couldn't find the size file for spot "+imagename);
		}
	}
	
	if (size == "tablet" || size == "all") {
		var sourceImageTabletH = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/2560/"+theDate+"_"+imagename+"_tableth.jpg");
		var sourceImageTabletV = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/1600/"+theDate+"_"+imagename+"_tabletv.jpg");
		var targetImageTabletH = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+"_tableth.jpg");
		var targetImageTabletV = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+"_tabletv.jpg");	
		var targetImagesParent = targetImageTabletV.parent;
		targetImagesParent.createDirectory();
		try {
			sourceImageTabletH.copyTo(targetImageTabletH, true);
			layoutStatus++;
		} catch(err) {
			try {
				var sourceImageTabletH = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/2560/"+theDate+"_"+imagename+".jpg");
				targetImageTabletH = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+".jpg");
				sourceImageTabletH.copyTo(targetImageTabletH, true);
				layoutStatus = 1;
			} catch(err) {
				alert("Couldn't find the Tablet H size file for "+imagename);
			}
		}
		try {
			sourceImageTabletV.copyTo(targetImageTabletV, true);
			layoutStatus++;
		} catch(err) {
			try {
				var sourceImageTabletV = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/1600/"+theDate+"_"+imagename+".jpg");
				targetImageTabletV = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+".jpg");	
				sourceImageTabletV.copyTo(targetImageTabletV, true);
				layoutStatus = 1;
			} catch(err) {
				alert("Couldn't find the Tablet V size file for "+imagename);
			}
		}
	}
	
	if (size == "mobile" || size == "all") {
		try {
			var sourceImageMobile = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/640/"+theDate+"_"+imagename+"_crop.jpg");
			var targetImageMobile = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+"_crop.jpg");
			var targetImagesParent = targetImageMobile.parent;
			targetImagesParent.createDirectory();
			sourceImageMobile.copyTo(targetImageMobile, true);
		} catch(err) {
			alert("Couldn't find the mobile crop file for "+imagename);
		}
	}
	
	if (size == "thumbnail" || size == "all") {
		try {
			var sourceImageMobile = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/140/"+theDate+"_"+imagename+"_cropth.png");
			if (stackName.indexOf("poem") == 0) {
				var sourceImageMobile = tabletVolume.resolvePath("EDIT/dummy_stacks/1920_poem_000000/toc.png");
			}
			if (rootDirectory.nativePath.indexOf("TNYTablet") > 0) {
				var targetImageMobile = rootDirectory.resolvePath(originalStackName+"/toc.png");
			} else {
				var targetImageMobile = rootDirectory.resolvePath(originalStackName+"/toc.png");
			}
			var targetImagesParent = targetImageMobile.parent;
			targetImagesParent.createDirectory();
			sourceImageMobile.copyTo(targetImageMobile, true);
		} catch(err) {
			alert("Couldn't find the thumbnail for "+imagename);
		}
	}
	
	if (size == "goat") {
		try {
			var sourceImageThumb = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/140/"+theDate+"_"+imagename+"_cropth.png");
			var targetImageThumbTwo = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+"_cropth.png");
			var targetImagesParentTwo = targetImageThumbTwo.parent;
			targetImagesParentTwo.createDirectory();
			sourceImageThumb.copyTo(targetImageThumbTwo, true);
		} catch(err) {
			alert("Couldn't find the thumbnail for "+imagename);
		}
		try {
			var sourceImageMobile = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/640/"+theDate+"_"+imagename+"_crop.jpg");
			var targetImageMobile = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+"_crop.jpg");
			var targetImagesParent = targetImageMobile.parent;
			targetImagesParent.createDirectory();
			sourceImageMobile.copyTo(targetImageMobile, true);
		} catch(err) {
			alert("Couldn't find the thumbnail for "+imagename);
		}
		try {
			var sourceImage = tnyVolume.resolvePath("Edit/Groups/Web/CondeNet/NPP Images/Resize_Out/"+theDateYear+"/"+theDateMonth+"/"+theDateDay+"/resize_out_de/2560/"+theDate+"_"+imagename+".jpg");
			targetImage = rootDirectory.resolvePath("HTMLResources/media/"+stackName+"/"+theDate+"_"+imagename+".jpg");
			sourceImage.copyTo(targetImage, true);
		} catch(err) {
			alert("Couldn't find the full size image for "+imagename);
		}
	}
	return layoutStatus;
	
}

function getArchiveDate(name) {
	var months = ["January","February","March","April","May","June","July","August","September","October","November","December"]
	var archiveYear = name.split("-")[1];
	if (name.split("-")[2][0] == 0) {
		var archiveMonth = months[parseInt(name.split("-")[2][1])-1];
	} else {
		var archiveMonth = months[parseInt(name.split("-")[2])-1];
	}
	if (name.split("-").length == 4) {
		var archiveDay = parseInt(name.split("-")[3]);
	} else {
		var archiveDay = parseInt(name.split("-")[3])+" &#38; "+parseInt(name.split("-")[4]);
	}
	return (archiveMonth+" "+archiveDay+", "+archiveYear);
}
