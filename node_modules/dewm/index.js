var fs = require('fs');
var utils = require('dewm-utils');
var paths = require('dewm-paths');
var xml = require('xml2js');
var dewm = {};

dewm.init = function() {
	var self = this;
	this.depts = ['makeup','makeup','copy','design'];
	this.getDates();
};

dewm.getDates = function() {
	var self = this;
	var dates = { "dates":[], "strings":[], "stringsWithHyphens":[], "stringsFormatted":[] };
	var mongoFound = [];
	var unordered = [];
	fs.readdir( paths.greenRoot, function (err, files) { 
	    if (!err) {
	        for (var i=0; i<files.length; i++) {
	        	if (files[i].match(/([0-9]){6}$/g) !== null && files[i] != "000000") {
	        		unordered.push(utils.createDateObject(files[i]));
	        	}
	        }
	    } else {
	        error = new Error("You're not connected to the Tablet Green server at the moment.")
	        throw error; 
	    };
	    ordered = unordered.sort(function(a,b){ return a-b; });
	    for (var i=0; i<ordered.length; i++) {
	    	d = utils.formatDate(ordered[i]);
	        dates.dates.push(d[0]);
	        dates.strings.push(d[1]);
	        dates.stringsWithHyphens.push(d[2]);
	        dates.stringsFormatted.push(d[3]);
	        mongoFound.push({ "string":d[1] });
	    }
	    utils.checkMissingIssues(mongoFound,dates);
	    self.dates = dates;
		self.weeks = Array(dates.length);
		self.setWeek(dates.strings.length-1);
	});
};

dewm.setWeek = function(week,mode,callback) {
	var self = this;
	self.latest = week;
	self.getWeek(week,mode,callback);
}

dewm.getWeek = function(week,mode,callback) {
	var self = this;
	var mode = typeof mode !== 'undefined' ? mode : "";
	var issueDate = self.dates.strings[week];
	var issueDateWithHyphens = self.dates.stringsWithHyphens[week];
	var issueDateFormatted = self.dates.stringsFormatted[week];
	var mongoStacks = [];
	fs.readdir( paths.greenRoot+issueDate+"/TNY"+issueDate+"_SourceFiles/TNY"+issueDate+"_MasterSource/", function (err, files) { 
		self.weeks[week] = {"files":files};
		var isThisWeekReady = true;
		if (files && files.length<2) {
			isThisWeekReady = false; 
		}
		fs.readFile(paths.orange+mode+issueDateWithHyphens+"/Sidecar/sidecar.xml", "utf8", function (err, data) {
			if (data != undefined) {
				xml.parseString(data, function (err, result) {
					if (result == undefined) {
						self.setWeek(self.dates.strings.length-1);
						var response = "The Sidecar XML for "+issueDateFormatted+" is malformed and so it cannot be loaded. Please fix it and try again.";
					} else {
						self.weeks[week].stacks = utils.addStacks(result.sidecar.entry);
						self.weeks[week].pathOrange = paths.orange+mode+issueDateWithHyphens;
						var response = "";
					}
					if(callback) {
						callback(response);
					};
				});
			} else if (!isThisWeekReady) {
				self.setWeek(week-1,"",callback)
			} else {
				year = new Date(issueDateFormatted);
				self.getWeek(week,"Archive/"+year.getFullYear()+"/",callback)
			}
		});
	});
}

dewm.monitorWeek = function() {
	var self = this;
	this.getWeek(self.dates.strings.length-1);
}

dewm.setAccess = function(access) {
	this.access = access;
}

dewm.displayWeek = function(week) {
	
}

dewm.getStack = function(stack) {

}

dewm.init();

module.exports = dewm;