var fs = require('fs');
var utils = require('dewm-utils');
var paths = require('dewm-paths');
var xml = require('xml2js');
var dewm = {};

dewm.init = function() {
	var self = this;
	this.depts = ['makeup','makeup','copy','design'];
	this.getDates();
};

dewm.getDates = function() {
	var self = this;
	var dates = { "dates":[], "strings":[], "stringsWithHyphens":[], "stringsFormatted":[] };
	var mongoFound = [];
	var unordered = [];
	fs.readdir( paths.greenRoot, function (err, files) { 
	    if (!err) {
	        for (var i=0; i<files.length; i++) {
	        	if (files[i].match(/([0-9]){6}$/g) !== null && files[i] != "000000") {
	        		unordered.push(utils.createDateObject(files[i]));
	        	}
	        }
	    } else {
	        error = new Error("You're not connected to the Tablet Green server at the moment.")
	        throw error; 
	    };
	    ordered = unordered.sort(function(a,b){ return a-b; });
	    for (var i=0; i<ordered.length; i++) {
	    	d = utils.formatDate(ordered[i]);
	        dates.dates.push(d[0]);
	        dates.strings.push(d[1]);
	        dates.stringsWithHyphens.push(d[2]);
	        dates.stringsFormatted.push(d[3]);
	        mongoFound.push({ "string":d[1] });
	    }
	    utils.checkMissingIssues(mongoFound,dates);
	    self.dates = dates;
	    self.weeks = [];
	    for (var i=0; i<dates.strings.length; i++) { 
		    self.weeks.push({
			    "files":[],
			    "stacks":[],
			    "monitored":false,
			    "sidecar":paths.sidecar.replace(/<insert_hyphen_date>/g,dates.stringsWithHyphens[i]),
			    "orange":paths.orange.replace(/<insert_hyphen_date>/g,dates.stringsWithHyphens[i])
			}) 
		}
		self.setWeek(dates.strings.length-3);
	});
};

dewm.setWeek = function(week,callback) {
	var self = this;
	self.latest = week;
	console.log(week);
	if (!self.weeks[week].monitored) {
		self.initWeek(week,callback);	
	}
}

dewm.initWeek = function(week,callback) {
	var self = this,
		mode = typeof mode !== 'undefined' ? mode : "",
		issueDate = self.dates.strings[week],
		issueDateWithHyphens = self.dates.stringsWithHyphens[week],
		issueDateFormatted = self.dates.stringsFormatted[week];
	fs.readFile(self.weeks[week].sidecar, "utf8", function (err, data) {
		if (data != undefined) {
			xml.parseString(data, function (err, result) {
				if (result == undefined) {
					self.setWeek(week-1);
					var response = "The Sidecar XML for "+issueDateFormatted+" is malformed and so it cannot be loaded. Please fix it and try again.";
				} else {
					var stacks = utils.addStacks(result.sidecar.entry);
					self.weeks[week].files = stacks.files;
					self.weeks[week].stacks = stacks.stacks;
					//self.monitorWeek(week);
					var response = "";
				}
				if(callback) {
					callback(response);
				};
			});
		} else {
			var year = new Date(issueDateFormatted),
				year = year.getFullYear();
			self.weeks[week].sidecar = paths.sidecarArchive.replace(/<insert_year>/g,year).replace(/<insert_hyphen_date>/g,issueDateWithHyphens);
			self.weeks[week].orange = paths.orangeRootArchive.replace(/<insert_year>/g,year).replace(/<insert_hyphen_date>/g,issueDateWithHyphens);
			self.initWeek(week,callback);
		}
	});
}

dewm.getWeek = function(week,mode,callback) {
	
}

dewm.monitorWeek = function(week) {
	var self = this,
		sidecar = self.weeks[week].sidecar;
	self.weeks[week].monitored = true;
	fs.watch(sidecar, function (event, filename) {
		self.getWeek(week);
	});
}

dewm.setAccess = function(access) {
	this.access = access;
}

dewm.displayWeek = function(week) {
	
}

dewm.getStack = function(stack) {

}

dewm.init();

module.exports = dewm;