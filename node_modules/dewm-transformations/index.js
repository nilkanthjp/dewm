var utils = require('dewm-utils');
var build = require('dewm-build');
var templates = require('dewm-templates');
var transformations = {}

transformations.cleanup = function(xml) {
	return xml.content
		.replace(new RegExp("“", 'g'), "&#8220")
		.replace(new RegExp("”", 'g'), "&#8221")
		.replace(new RegExp("&#8220 &#8216", 'g'), "&#8220&#160&#8216")
		.replace(new RegExp("&#8217 &#8221", 'g'), "&#8217&#160&#8221")
		.replace(new RegExp("<line>", 'g'), "<p>")
		.replace(new RegExp("e-mail", 'g'), "e&#8209mail")
		.replace(new RegExp('class="noindent"', 'g'), 'class="no-indent"')
		.replace(new RegExp('noindent', 'g'), 'no-indent')
		.replace(new RegExp('T-shirt', 'g'), "T&#8209shirt")
		.replace(new RegExp('t-shirt', 'g'), "t&#8209shirt");
};

transformations.router = function(stack) {
	var routes = {
		"dept":transformations.dept,
		"fiction":transformations.fiction,
		"crit":transformations.crit,
		"cont":transformations.dept,
		"mail":transformations.dept,
		"goat":transformations.dept,
		"talk":transformations.dept,
		"shouts":transformations.dept,
		"cart":transformations.dept,
		"sketchbook":transformations.dept,
		"sidebar":transformations.dept
	}, section = stack.split("_")[1];
	return routes[section];
};

transformations.build = function(xml,template) {
	var build = require('dewm-build'),
		touts = build.touts.init(xml),
		elements = build.elements.init(xml),
		toolbox = build.toolbox(xml,touts),
		content = transformations.cleanup(xml);
		if (elements.length>0) { content = build.elements.insert(content,elements); };
		html = transformations.header(xml,template).replace("<!--insert content here-->",content).replace("<!--insert toolbox here-->", toolbox);
	return html;
};

transformations.header = function(xml,template) {
	return template.replace(new RegExp("<!--insert title here-->", 'g'), xml.title)
	.replace(new RegExp("<!--insert rubric here-->", 'g'), xml.subhead)
	.replace(new RegExp("<!--insert deck here-->", 'g'), xml.summary)
	.replace(new RegExp("<!--insert author here-->", 'g'), xml.author)
	.replace(new RegExp("<!--insert date here-->", 'g'), utils.format.date.stack(xml.stackname))
	.replace(new RegExp("<!--insert stackname here-->", 'g'), xml.stackname)
	.replace(new RegExp("<!--insert trimmed stackname here-->", 'g'), utils.format.stack.trim(xml.stackname))
	.replace(new RegExp("<!--insert r number here-->", 'g'), xml.image)
	.replace(new RegExp("<!--insert gallery link here-->", 'g'), "media/"+utils.format.stack.trim(xml.stackname)+"/"+utils.format.stack.trim(xml.stackname)+"_gallery.html");
};

transformations.dept = function(xml,callback) {
	utils.mongo.find("assignments",{stack:xml.stackname},{},function(err, items){
		var assignments = items[0], response = {status:true,text:"Successfully built "+xml.stackname+" stack."}, html="",
			layout = assignments.art.layout;
		if (layout==null) { response.status=false; response.text = "Sorry, can't build the stack yet, no layout selected."; }
		else {
			html = templates.stacks.dept.replace("<!--insert header html here-->",templates.layouts[layout]),
			html = transformations.build(xml,html);
		};
		callback(html,response);
	});
};

transformations.fiction = function(xml,callback) {
	var response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		html = templates.stacks.dept.replace("<!--insert header html here-->",templates.layouts[".fiction"]),
		// special fiction rubric
		html = html.replace("<h2><!--insert rubric here--></h2>","<h2 class='two-lines'><span class='grey'>Fiction&nbsp;</span>&nbsp;By "+xml.author+"</h2>"),
		html = transformations.build(xml,html);
	callback(html,response);
};

transformations.crit = function(xml,callback) {
	if (xml.stackname.indexOf("_briefly_")>-1) { transformations.briefly(xml,callback); }
	else { transformations.dept(xml,callback); };
};

var transformShouts = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {
	
	var danvilleTouts = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<tabletmultimediaextras>")+25,theCondeNetXMLText.indexOf("</tabletmultimediaextras>"));
	danvilleTouts = generateToutsObject(danvilleTouts,stackName);

	var danvilleElements = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<articleelements>")+18,theCondeNetXMLText.indexOf("</articleelements>"));
	danvilleElements = generateElementsObject(danvilleElements,danville.Image,stackName,rootDirectory);

	// Get the piece's content and edit the tags
	var danvilleHTML = transformContent(theCondeNetXMLText,stackName);

	// Construct the piece's toolbox, beginning with the Share URLs
	var danvilleToolbox = window.toolboxTemplate.replace("<!--insert facebook here-->",danville.Facebook);
	danvilleToolbox = danvilleToolbox.replace("<!--insert twitter here-->",danville.Twitter);
	danvilleToolbox = danvilleToolbox.replace("<!--insert email here-->",danville.Email);
	danvilleToolbox = danvilleToolbox.replace("<!--insert bitly here-->",danville.Bitly);
	danvilleToolbox = danvilleToolbox.replace("<!--insert touts here-->",'{"type":"weblink", "text":"Daily Shouts: New humor, five days a week.", "src":"http://www.newyorker.com/humor/daily-shouts"},\n\t\t{"type":"weblink", "text":"The Borowitz Report: The news, reshuffled.", "src":"http://www.newyorker.com/humor/borowitz-report"}');
		
	// Copy the art to the HTMLResources>Media folder
	var layoutStatus = copyImage(danville.Image,stackName,"all",rootDirectory)
		
	// Construct Danville HTML, using the variables just defined
	danvilleHTML = template.replace("<!--insert content here-->",danvilleHTML);
	danvilleHTML = danvilleHTML.replace("<!--insert toolbox here-->", danvilleToolbox);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert title here-->", 'g'), danville.Title);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert rubric here-->", 'g'), danville.Rubric);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert deck here-->", 'g'), danville.Deck);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert author here-->", 'g'), danville.Author);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stripStackNumber(stackName));
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert r number here-->", 'g'), danville.Image);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert gallery link here-->", 'g'), "media/"+stripStackNumber(stackName)+"/"+stripStackNumber(stackName)+"_gallery.html");
	
	if (rootDirectory.nativePath.indexOf("TNYTablet") == -1) {
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert caption here-->", 'g'), '<br><br><br><p class="caption" style="font-family:CaslonPro; font-size:1.25em; font-style:italic">'+danville.Caption+'</p><br><br><br>');	
	}
	
	// Output final HTML for the Digital Danville
	return danvilleHTML;
	
}

var transformContribs = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {
	// Construct the piece's toolbox, beginning with the Share URLs
	var danvilleToolbox = window.toolboxTemplate.replace("<!--insert facebook here-->",danville.Facebook);
	danvilleToolbox = danvilleToolbox.replace("<!--insert twitter here-->",danville.Twitter);
	danvilleToolbox = danvilleToolbox.replace("<!--insert email here-->",danville.Email);
	danvilleToolbox = danvilleToolbox.replace("<!--insert bitly here-->",danville.Bitly);
	
	// Get the piece's content and edit the tags
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));
	danvilleHTML = danvilleHTML.replace(new RegExp("<a>", 'g'), '<a href="navto://LINKHERE">');
	
	// Construct Danville HTML, using the variables just defined
	danvilleHTML = template.replace("<!--insert content here-->",danvilleHTML);
	danvilleHTML = danvilleHTML.replace("<!--insert toolbox here-->", danvilleToolbox);
	return danvilleHTML;
}

var transformMail = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {
	// Get the piece's content and edit the tags
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));
	
	// Construct the piece's toolbox, beginning with the Share URLs
	var danvilleToolbox = window.toolboxTemplate.replace("<!--insert facebook here-->",danville.Facebook);
	danvilleToolbox = danvilleToolbox.replace("<!--insert twitter here-->",danville.Twitter);
	danvilleToolbox = danvilleToolbox.replace("<!--insert email here-->",danville.Email);
	danvilleToolbox = danvilleToolbox.replace("<!--insert bitly here-->",danville.Bitly);
	danvilleToolbox = danvilleToolbox.replace(new RegExp('false', 'g'), "true");
	
	// Construct Danville HTML, using the variables just defined
	danvilleHTML = template.replace("<!--insert content here-->",danvilleHTML+"\n</span>\n</article>");
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert toolbox here-->", 'g'), danvilleToolbox);
	return danvilleHTML;
}

var transformTalk = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {
	if (stackName.indexOf("1400") == 0) {
		var danvilleHTML = transformTalkOpener(theCondeNetXMLText,stackName,window.talkOpenerTemplate,danville,rootDirectory)
	} else {
		var danvilleTouts = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<tabletmultimediaextras>")+25,theCondeNetXMLText.indexOf("</tabletmultimediaextras>"));
		danvilleTouts = generateToutsObject(danvilleTouts,stackName);
	
		var danvilleElements = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<articleelements>")+18,theCondeNetXMLText.indexOf("</articleelements>"));
		danvilleElements = generateElementsObject(danvilleElements,danville.Image,stackName,rootDirectory);
		
		// Get the piece's content and edit the tags
		var danvilleHTML = transformContent(theCondeNetXMLText,stackName);
	
		// Construct the piece's toolbox, beginning with the Share URLs
		var danvilleToolbox = window.toolboxTemplate.replace("<!--insert facebook here-->",danville.Facebook);
		danvilleToolbox = danvilleToolbox.replace("<!--insert twitter here-->",danville.Twitter);
		danvilleToolbox = danvilleToolbox.replace("<!--insert email here-->",danville.Email);
		danvilleToolbox = danvilleToolbox.replace("<!--insert bitly here-->",danville.Bitly);
		if (stackName.indexOf("comm") > 0) {
			danvilleToolbox = danvilleToolbox.replace("<!--insert touts here-->",'{"type":"weblink", "text":"Daily Comment: Opinions, arguments, and reflections on the news.", "src":"http://www.newyorker.com/news/daily-comment"}');
		}
		
		// If this is talk, some modifications need to be made to select the right art and change the HTML a bit
		if (danville.Image.length == 0) {
			danville.Image = danville.Spot;
			danville.Credit = danville.Credit;	
		} else {
			if (stackName.indexOf("surowiecki") > 0) {
				danville.Caption = ""; // Surowiecki credit should appear only in gallery
				danville.Credit = ""; // Surowiecki credit should appear only in gallery
			} else {
				danville.Credit = danville.Credit;
			}
		}
		danville.Image = danville.Image.replace("rgb","");
		copyImage(danville.Image.replace("rgb",""),stackName,"generic",rootDirectory)

		// Construct Danville HTML, using the variables just defined
		danvilleHTML = template.replace("<!--insert content here-->",danvilleHTML);
		danvilleHTML = danvilleHTML.replace("<!--insert toolbox here-->", danvilleToolbox);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert title here-->", 'g'), danville.Title);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert rubric here-->", 'g'), danville.Rubric);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert deck here-->", 'g'), danville.Deck);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert author here-->", 'g'), danville.Author);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert credit here-->", 'g'), danville.Credit);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stripStackNumber(stackName));
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert header class here-->", 'g'), "horizontal-no-bleed");
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert r number here-->", 'g'), danville.Image);
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert caption here-->", 'g'), "<figcaption>"+danville.Caption+"</figcaption>");
		
		// Special call to remove the ending dingbat.
		danvilleHTML = danvilleHTML.replace(new RegExp('&#160;<span class="dingbat">&#9830;</span>', 'g'), "");

		if (danvilleElements.length > 0) {
			danvilleElements[0] = danvilleElements[0].replace("<!--insert date here-->", theDate);
			danvilleHTML =  danvilleHTML.replace("<!--insert cartoon here-->", danvilleElements[0]);
		}
		
		if (stackName.indexOf("surowiecki") > 0) {
	template.replace(new RegExp("<!--insert suro gallery here-->", 'g'),'<div><a href="../HTMLResources/media/talk_surowiecki_'+theDate+'/talk_surowiecki_'+theDate+'_gallery.html" class="icon-plus red"></a></div>');
		}
	}
	
	// Output final HTML for the Digital Danville
	return danvilleHTML;
}

var transformTalkOpener = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {
	var talkStories = new Array()
	for (var d=0, len=window.stackNames.length; d<len; d++) {
		if (window.stackNames[d].indexOf("talk") > 0 && window.stackNames[d].indexOf("1400") < 0) {
			talkStories.push(window.xmlNames[d]);
		}
	}
	var talkStoriesHTML = generateTalkStoriesHTML(talkStories);
		
	var danvilleHTML = transformContent(theCondeNetXMLText,stackName);
	danvilleHTML = danvilleHTML.split(" ",25).join(" ").replace(' class="descender"',"")+"...</p>";

	// Construct Danville HTML, using the variables just defined		
	danvilleHTML = template.replace("<!--insert blurb here-->",danvilleHTML);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert title here-->", 'g'), danville.Title);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert author here-->", 'g'), danville.Author);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert stackname here-->", 'g'), stripStackNumber(stackName));
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert r number here-->", 'g'), danville.Image);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert talk here-->", 'g'), talkStoriesHTML);

	// Output final HTML for the Digital Danville
	return danvilleHTML;
}

var transformPoem = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {
	
	var danvilleTouts = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<tabletmultimediaextras>")+25,theCondeNetXMLText.indexOf("</tabletmultimediaextras>"));
	var danvillePoemAudio = generatePoemAudioToolbox(danvilleTouts);	
	danvilleTouts = generateToutsObject(danvilleTouts,stackName);

	// Construct the piece's toolbox, beginning with the Share URLs
	var danvilleToolbox = window.toolboxTemplate.replace("<!--insert facebook here-->",danville.Facebook);
	danvilleToolbox = danvilleToolbox.replace("<!--insert twitter here-->",danville.Twitter);
	danvilleToolbox = danvilleToolbox.replace("<!--insert email here-->",danville.Email);
	danvilleToolbox = danvilleToolbox.replace("<!--insert bitly here-->",danville.Bitly);
	danvilleToolbox = danvilleToolbox.replace('"showOnLoad" : false','"showOnLoad" : true');
	danvilleToolbox = danvilleToolbox.replace('"mini" : false','"mini" : true');

	// Get the piece's content and edit the tags
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));
	
	copyImage(danville.Image,stackName,"thumbnail",rootDirectory)
	
	// Construct Danville HTML, using the variables just defined
	danvilleHTML = template.replace("<!--insert content here-->",danvilleHTML);
	if (danvilleTouts.length > 1) {
		danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert poem audio div here-->", 'g'), '<div id="poem-audio"></div>\n\t\t\t');
	}
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert title here-->", 'g'), danville.Title);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert author here-->", 'g'), danville.Author);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert rubric here-->", 'g'), danville.Rubric);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert toolbox here-->", 'g'), danvillePoemAudio+"window.tnyToolbox = {"+danvilleToolbox+"\n};");
	return danvilleHTML;
}

var transformBackPage = function(theCondeNetXMLText,stackName,template,danville,rootDirectory) {

}

var transformCartoons = function(theCondeNetXMLText,stackName,danville,rootDirectory) {
	danvilleElements = "";
	for (var i=0, len=window.stackNames.length; i<len; i++) {
		if (window.stackNames[i].indexOf("_comm_") > -1 || window.stackNames[i].indexOf("_talk_") > -1 || window.stackNames[i].indexOf("_dept_") > -1 || window.stackNames[i].indexOf("_crit_") > -1 || window.stackNames[i].indexOf("_fiction_") > -1) {
			try {
				var condeNetXML = window.condenetDirectory.resolvePath(window.xmlNames[i]+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(condeNetXML, air.FileMode.READ);
				var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
				fileStream.close();
				var danvilleElements = danvilleElements+condeNetXMLStr.slice(condeNetXMLStr.indexOf("<articleelements>")+18,condeNetXMLStr.indexOf("</articleelements>"));
			} catch(err) {}
		}
	}
	var finalImagenames = [];
	var finalImageCaptions = [];
	$(danvilleElements).find("imagename").each(function(index) {
		var imagename = $(this).text().toLowerCase();
		var imagetype = $(danvilleElements).find("type")[index].textContent;
		if (imagetype == "element_cartoon") {
			if (imagename.charAt(0) === "a" && !isNaN(imagename.charAt(1))) {
				finalImagenames.push(imagename);
				try {
					finalImageCaptions.push($(danvilleElements).find("elementcaption")[index].textContent);
				} catch(err) {
					finalImageCaptions.push("");
				}
			}
		}
	});

	var finalElementsHTML = "";
	for (var i=0, len=finalImagenames.length; i<len; i++) {
		var theCaption = finalImageCaptions[i].replace(new RegExp("”", 'g'), "&#8221;").replace(new RegExp("“", 'g'), "&#8220;").replace(new RegExp("‘", 'g'), "&#8216;").replace(new RegExp("’", 'g'), "&#8217;").replace(new RegExp(';""', 'g'), ';"').replace(new RegExp('\r""', 'g'), '"').replace(new RegExp('"""', 'g'), '""');
		theCaption = theCaption.replace(new RegExp("\n", 'g'), "")
		finalElementsHTML=finalElementsHTML+',\n\t\t{ "order" : "'+i+'", "name":"'+finalImagenames[i]+'", "src" : "../media/cartoons/'+theDate+'_'+finalImagenames[i]+'.jpg", "caption" : "'+theCaption+'"}';
	}

	finalElementsHTML = 'var cartoonsData = {"cartoons": [ '+finalElementsHTML.slice(1)+'\n ] }';
	finalElementsHTML = finalElementsHTML.replace(new RegExp('"""', 'g'), '""').replace(new RegExp(';""', 'g'), ';"').replace(new RegExp('; ""', 'g'), ';"');
	finalElementsHTML = finalElementsHTML.replace(new RegExp('"......&#8220;', 'g'), '"\&#8220;');
	finalElementsHTML = finalElementsHTML.replace(new RegExp('&#8221;......""', 'g'), '&#8221;"');
	finalElementsHTML = finalElementsHTML.replace(new RegExp('&#8221;......"', 'g'), '&#8221;"');
	return finalElementsHTML;
}

var transformCartoonsStack = function(stackName,rootDirectory,callback) {
	danvilleElements = "";
	for (var i=0, len=window.stackNames.length; i<len; i++) {
		if (window.stackNames[i].indexOf("_comm_") > -1 || window.stackNames[i].indexOf("_talk_") > -1 || window.stackNames[i].indexOf("_dept_") > -1 || window.stackNames[i].indexOf("_crit_") > -1 || window.stackNames[i].indexOf("_fiction_") > -1) {
			try {
				var condeNetXML = window.condenetDirectory.resolvePath(window.xmlNames[i]+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(condeNetXML, air.FileMode.READ);
				var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
				fileStream.close();
				var danvilleElements = danvilleElements+condeNetXMLStr.slice(condeNetXMLStr.indexOf("<articleelements>")+18,condeNetXMLStr.indexOf("</articleelements>"));
				if (danvilleElements.split("cartoon").length > 1) {
					i = window.stackNames.length;
				}
			} catch(err) {}
		}
	}
	var finalImagenames = [];
	var finalImageCaptions = [];
	$(danvilleElements).find("imagename").each(function(index) {
		var imagename = $(this).text().toLowerCase();
		var imagetype = $(danvilleElements).find("type")[index].textContent;
		if (imagetype == "element_cartoon") {
			finalImagenames.push(imagename);
			try {
				finalImageCaptions.push($(danvilleElements).find("elementcaption")[index].textContent);
			} catch(err) {
				finalImageCaptions.push("");
			}
		}
	});
	
	finalHTML = window.cartoonStackTemplate.replace(new RegExp('<!--insert caption here-->', 'g'), finalImageCaptions[0]);
	finalHTML = finalHTML.replace(new RegExp('<!--insert image here-->', 'g'), finalImagenames[0]);
	finalHTML = finalHTML.replace(new RegExp('<!--insert date here-->', 'g'), theDate);

	callback(finalHTML);
}

var transformBriefly = function(theCondeNetXMLText,stackName,template,danville,rootDirectory,callback) {

	var danvilleTouts = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<tabletmultimediaextras>")+25,theCondeNetXMLText.indexOf("</tabletmultimediaextras>"));
	danvilleTouts = generateToutsObject(danvilleTouts,stackName);
	
	// Construct the piece's toolbox, beginning with the Share URLs
	var danvilleToolbox = window.toolboxTemplate.replace("<!--insert facebook here-->",danville.Facebook);
	danvilleToolbox = danvilleToolbox.replace("<!--insert twitter here-->",danville.Twitter);
	danvilleToolbox = danvilleToolbox.replace("<!--insert email here-->",danville.Email);
	danvilleToolbox = danvilleToolbox.replace("<!--insert bitly here-->",danville.Bitly);
	danvilleToolbox = danvilleToolbox.replace("<!--insert touts here-->",danvilleTouts);
	danvilleToolbox = danvilleToolbox.replace('"showOnLoad" : false','"showOnLoad" : true');
	danvilleToolbox = danvilleToolbox.replace('"mini" : false','"mini" : true');

	// Get the piece's content and edit the tags
	var danvilleHTML = theCondeNetXMLText.slice(theCondeNetXMLText.indexOf("<content>")+10,theCondeNetXMLText.indexOf("</content>"));

	var imageNamesHTML = theCondeNetXMLText.split('src=');
	var imageNames = new Array();
	for (var i=1, len=imageNamesHTML.length; i<len; i++) {
		var imagename = imageNamesHTML[i].split('"')[1].split("/")[imageNamesHTML[i].split('"')[1].split("/").length-1].split("_")[1].split(".")[0];
		imageNames.push(imagename);
	}

	for (var i=0, len=imageNames.length; i<len; i++) {
		copyImage(imageNames[i],stackName,"generic",rootDirectory)
		if (rootDirectory.nativePath.indexOf("TNYTablet") > 0) {
	template.replace(new RegExp('src=\"/.*\"', ''), 'src="../HTMLResources/media/'+stripStackNumber(stackName)+'/'+theDate+"_"+imageNames[i]+'.jpg"');
		} else {
	template.replace(new RegExp('src=\"/.*\"', ''), 'src="../HTMLResources/media/'+stripStackNumber(stackName)+'/'+theDate+"_"+imageNames[i]+'.jpg"');
		}	
	}
	
	danvilleHTML = template.replace("<!--insert content here-->",danvilleHTML);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert toolbox here-->", 'g'), danvilleToolbox);
	
	// Output final HTML for the Digital Danville
	callback(danvilleHTML);
}

// Note that all of these transform functions can be found in stacks.js
var transformTOCToHTML = function(condeNetXMLStr,stackName,rootDirectory,callback) {

	var tocDepts = "";
	var tocCrits ="";
	var tocCover ="";
	var tocDeptCount = 0;
	for (var i=0, len=window.stackNames.length; i<len; i++) {
		if (window.stackNames[i].indexOf("_comm_") > -1 || window.stackNames[i].indexOf("_talk_") > -1 || window.stackNames[i].indexOf("_dept_") > -1 || window.stackNames[i].indexOf("_crit_") > -1 || window.stackNames[i].indexOf("_fiction_") > -1 || window.stackNames[i].indexOf("_shouts_") > -1 || window.stackNames[i].indexOf("_poem_") > -1 || window.stackNames[i].indexOf("_cover_") > -1) {
			try {
				var condeNetXML = window.condenetDirectory.resolvePath(window.xmlNames[i]+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(condeNetXML, air.FileMode.READ);
				var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
				fileStream.close();

				var parser = new DOMParser();
				var XML = parser.parseFromString(condeNetXMLStr,"text/xml");

				var theStackname = getXMLTagInfo(XML,"stackname");
				var theAuthor = getXMLTagInfo(XML,"author");
				var theRubric = getXMLTagInfo(XML,"subhead");
				var theTitle = getXMLTagInfo(XML,"title");
				var theVolume = getXMLTagInfo(XML,"volumenumber");
				var theIssue = getXMLTagInfo(XML,"issuenumber");

				// check for multimedia
				var theMultimedia = condeNetXMLStr.slice(condeNetXMLStr.indexOf("<tabletmultimediaextras>")+25,condeNetXMLStr.indexOf("</tabletmultimediaextras>"));
				var theMultimediaTypes = [theMultimedia.split("<type_1>")[1].split("</type_1>")[0],theMultimedia.split("<type_2>")[1].split("</type_2>")[0],theMultimedia.split("<type_3>")[1].split("</type_3>")[0],theMultimedia.split("<type_4>")[1].split("</type_4>")[0],theMultimedia.split("<type_5>")[1].split("</type_5>")[0]];
				// var theMultimediaTouts = [theMultimedia.split("<tout_1>")[1].split("</tout_1>")[0],theMultimedia.split("<tout_2>")[1].split("</tout_2>")[0],theMultimedia.split("<tout_3>")[1].split("</tout_3>")[0],theMultimedia.split("<tout_4>")[1].split("</tout_4>")[0],theMultimedia.split("<tout_5>")[1].split("</tout_5>")[0]];
				var theToutIcons = "",
					theTouts = "";
				for (var toutCount=0; toutCount<5; toutCount++) {
					if (theMultimediaTypes[toutCount].length>1) {
						// if (toutCount === 0) theMultimediaTouts[toutCount] = "Plus: " + theMultimediaTouts[toutCount];
						theTouts = "\t\t\t\t\t\t<h6>Plus: Multimedia tout TK.</h6>\r";
						theToutIcons += "\t\t\t\t\t\t<span class='icon-"+theMultimediaTypes[toutCount].toLowerCase().replace(new RegExp(' ', 'g'), "")+" grey'></span>\r";
					}
				}

				// construct html for this entry in the toc
				if (theStackname.indexOf("_dept_") > 0) {
					var currentToc = window.tocDept;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocDeptCount++
					if (tocDeptCount == 3) {
						tocDepts = tocDepts+"\r<hr>\r"+currentToc;
					} else {
						tocDepts = tocDepts+"\r"+currentToc;
					}
					
				} else if (theStackname.indexOf("_shouts_") > 0) {
					var currentToc = window.tocShouts;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons + '<span class="icon-weblink red"></span>');
					tocDepts = tocDepts+"\r"+currentToc;
				} else if (theStackname.indexOf("_poem_") > 0) {
					var currentToc = window.tocPoem;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Title TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocDepts = tocDepts+"\r"+currentToc;
				} else if (theStackname.indexOf("_fiction_") > 0) {
					var currentToc = window.tocFiction;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Title TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocDepts = tocDepts+"\r<hr>\r"+currentToc;
				} else if (theStackname.indexOf("_briefly_") > 0) {
					var currentToc = window.tocBriefly;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocCrits = tocCrits+"\r"+currentToc;
				} else if (theStackname.indexOf("_crit_") > 0) {
					var currentToc = window.tocDept;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theRubric);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocCrits = tocCrits+"\r"+currentToc;
				} else if (theStackname.indexOf("_cover_") > 0) {
					var currentToc = window.tocCover;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theRubric);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Title TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocCover = currentToc;
				}

			} catch(err) {}
		}
	}
	

	var theDay = date;
	if ( date < 10 ) {
		theDay = theDay.substr( theDay.length - 1 );
	}

	var theFormattedDate = months[month-1]+" "+theDay+", "+year;

	danvilleHTML = window.tocTemplate;
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert month here-->", 'g'), pad(month));
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert year here-->", 'g'), pad(year));
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert day here-->", 'g'), theDay);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert formatted date here-->", 'g'), theFormattedDate);
	danvilleHTML = danvilleHTML.replace("<!--insert toc depts here-->", tocDepts);
	danvilleHTML = danvilleHTML.replace("<!--insert toc crits here-->", tocCrits);
	danvilleHTML = danvilleHTML.replace("<!--insert cover here-->", window.tocCover);
	danvilleHTML = danvilleHTML.replace("<!--insert volume number here-->", romanize(theVolume));
	danvilleHTML = danvilleHTML.replace("<!--insert issue number here-->", theIssue);
	
	// Output final HTML for the Digital Danville
	callback(danvilleHTML);
}

module.exports = transformations;