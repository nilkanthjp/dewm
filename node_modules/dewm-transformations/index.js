var utils = require('dewm-utils');
var build = require('dewm-build');
var templates = require('dewm-templates');
var transformations = {talk:{}}

transformations.router = function(stack) {
	var routes = {
		"dept":transformations.dept,
		"comm":transformations.talk,
		"fiction":transformations.fiction,
		"crit":transformations.crit,
		"poem":transformations.poem,
		"cont":transformations.contribs,
		"mail":transformations.mail,
		"goat":transformations.dept,
		"talk":transformations.talk,
		"shouts":transformations.shouts,
		"cart":transformations.dept,
		"sketchbook":transformations.dept,
		"sidebar":transformations.dept
	}, section = stack.split("_")[1];
	return routes[section];
};

transformations.build = function(xml,template) {
	var build = require('dewm-build'),
		touts = build.touts.init(xml),
		elements = build.elements.init(xml),
		toolbox = build.toolbox(xml,touts),
		content = transformations.cleanup(xml);
		if (elements.length>0) { content = build.elements.insert(content,elements); };
		html = transformations.header(xml,template).replace("<!--insert content here-->",content).replace("<!--insert toolbox here-->", toolbox);
	return html;
};

transformations.cleanup = function(xml) {
	return xml.content
		.replace(new RegExp("“", 'g'), "&#8220")
		.replace(new RegExp("”", 'g'), "&#8221")
		.replace(new RegExp("&#8220 &#8216", 'g'), "&#8220&#160&#8216")
		.replace(new RegExp("&#8217 &#8221", 'g'), "&#8217&#160&#8221")
		.replace(new RegExp("<line>", 'g'), "<p>")
		.replace(new RegExp("e-mail", 'g'), "e&#8209mail")
		.replace(new RegExp('class="noindent"', 'g'), 'class="no-indent"')
		.replace(new RegExp('noindent', 'g'), 'no-indent')
		.replace(new RegExp('T-shirt', 'g'), "T&#8209shirt")
		.replace(new RegExp('t-shirt', 'g'), "t&#8209shirt");
};

transformations.header = function(xml,template) {
	return template.replace(new RegExp("<!--insert title here-->", 'g'), xml.title)
	.replace(new RegExp("<!--insert rubric here-->", 'g'), xml.subhead)
	.replace(new RegExp("<!--insert deck here-->", 'g'), xml.summary)
	.replace(new RegExp("<!--insert author here-->", 'g'), xml.author)
	.replace(new RegExp("<!--insert date here-->", 'g'), utils.format.date.stack(xml.stackname))
	.replace(new RegExp("<!--insert stackname here-->", 'g'), xml.stackname)
	.replace(new RegExp("<!--insert trimmed stackname here-->", 'g'), utils.format.stack.trim(xml.stackname))
	.replace(new RegExp("<!--insert r number here-->", 'g'), xml.image)
	.replace(new RegExp("<!--insert gallery link here-->", 'g'), "media/"+utils.format.stack.trim(xml.stackname)+"/"+utils.format.stack.trim(xml.stackname)+"_gallery.html");
};

// begin article-specific transformations, starting with department/fact pieces

transformations.dept = function(xml,callback) {
	utils.mongo.find("assignments",{stack:xml.stackname},{},function(err, items){
		var assignments = items[0], response = {status:true,text:"Successfully built "+xml.stackname+" stack."}, html="",
			layout = assignments.art.layout;
		if (layout==null) { response.status=false; response.text = "Sorry, can't build the stack yet, no layout selected."; }
		else {
			html = templates.stacks.dept.replace("<!--insert header html here-->",templates.layouts[layout]),
			html = transformations.build(xml,html);
		};
		callback(html,response);
	});
};

// begin fiction transformations

transformations.fiction = function(xml,callback) {
	var response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		html = templates.stacks.dept.replace("<!--insert header html here-->",templates.layouts[".fiction"]),
		html = html.replace("<h2><!--insert rubric here--></h2>","<h2 class='two-lines'><span class='grey'>Fiction&nbsp;</span>&nbsp;By "+xml.author+"</h2>"),
		html = transformations.build(xml,html);
	callback(html,response);
};

// begin critics transformations (note that if a critics piece is not "briefly," it uses the same transformations as a department piece)

transformations.crit = function(xml,callback) {
	if (xml.stackname.indexOf("_briefly_")>-1) { transformations.briefly(xml,callback); }
	else { transformations.dept(xml,callback); };
};

transformations.briefly = function(xml,callback) {
	var build = require('dewm-build'),
		response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		html = transformations.build(xml,templates.stacks.briefly),
		date = utils.format.date.object(utils.format.date.stack(xml.stackname)),
		find = "/wp-content/uploads/"+date.getFullYear()+"/"+utils.format.pad(date.getMonth()+1,2),
		images = html.match(new RegExp(find+"\/(.*)\.jpg", 'g'));
	for (var i=0; i<images.length; i++) {
		build.image.generic(xml,images[i].replace(new RegExp(find+"\/(.*)\.jpg", 'g'),"$1"),xml.output);
	};
	html = html.replace('"showOnLoad" : false','"showOnLoad" : true').replace('"mini" : false','"mini" : true').replace(new RegExp(find, 'g'),"../HTMLResources/media/"+utils.format.stack.trim(xml.stackname));
	callback(html,response);
};

// begin one-off article transformations

transformations.shouts = function(xml,callback) {
	var response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		html = transformations.build(xml,templates.stacks.shouts);
	callback(html,response);
};

transformations.contribs = function(xml,callback) {
	var response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		html = transformations.build(xml,templates.stacks.contribs).replace(/<a>/g,"<a href='navto://'>"),
		stacks = dewm.weeks[dewm.dates.strings.indexOf(utils.format.date.stack(xml.stackname))].files,
		contributors = html.match(new RegExp("<strong>(.*)<a href='navto://", 'g'));
	for (var i=0; i<contributors.length; i++) {
		var name=contributors[i].split("<strong>")[1].split("</strong>")[0].split(" ")[1], link="LINKHERE";
		for (var j=0; j<stacks.length; j++) { if (stacks[j].indexOf(name.toLowerCase())>-1) { link=stacks[j]; break; } };
		html=html.replace(contributors[i],contributors[i]+link)
	};
	callback(html,response);
};

transformations.mail = function(xml,callback) {
	var response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		html = transformations.build(xml,templates.stacks.mail),
		html = html.replace('"showOnLoad" : false','"showOnLoad" : true').replace('"mini" : false','"mini" : true');
	callback(html,response);
};

transformations.poem = function(xml,callback) {
	var build = require('dewm-build'),
		response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		toolbox = build.toolbox(xml,""),
		content = transformations.cleanup(xml),
		html = transformations.header(xml,templates.stacks.poem).replace("<!--insert content here-->",content).replace("<!--insert toolbox here-->", toolbox).replace('"showOnLoad" : false','"showOnLoad" : true').replace('"mini" : false','"mini" : true');
	if (xml.tabletmultimediaextras.tabletextra_1.type_1=="Audio") { 
		var player = '\n\twindow.tnyAudio = {\n\t\t"src":"http://downloads.newyorker.com/mp3/'+xml.tabletmultimediaextras.tabletextra_1.ref_1+'.mp3",\n\t\t"label" : "Read by the author.",\n\t\t"el" : "#poem-audio"\n\t};\n\t\t';
		html=html.replace("window.tnyToolbox =",player+"\n\twindow.tnyToolbox =").replace("<!--insert poem audio div here-->",'<div id="poem-audio"></div>');
	};
	callback(html,response);
};

// begin Talk transformations

transformations.talk = function(xml,callback) {
	if (xml.stackname.indexOf("_surowiecki_")>0) { var template=templates.talk.suro; }
	else { var template=templates.talk.single; }
	var response = {status:true,text:"Successfully built "+xml.stackname+" stack."},
		build = require('dewm-build'),
		touts = build.touts.init(xml),
		elements = build.elements.init(xml),
		toolbox = build.toolbox(xml,touts),
		content = transformations.cleanup(xml);
		html = transformations.header(xml,template).replace("<!--insert content here-->",content).replace("<!--insert toolbox here-->", toolbox).replace("<!--insert caption here-->","<figcaption>"+xml.caption+"</figcaption>").replace("<!--insert credit here-->",xml.credit);
	if (elements.length>0) { html=html.replace("<!--insert cartoon here-->",elements[0]); };
	callback(html,response);
};

transformations.talkmenu = function(story,template) {
	return template.replace(new RegExp("<!--insert title here-->", 'g'), story.title)
	.replace(new RegExp("<!--insert rubric here-->", 'g'), story.kicker)
	.replace(new RegExp("<!--insert author here-->", 'g'), story.author)
	.replace(new RegExp("<!--insert stackname here-->", 'g'), story.stack);
};

var transformCartoons = function(theCondeNetXMLText,stackName,danville,rootDirectory) {
	danvilleElements = "";
	for (var i=0, len=window.stackNames.length; i<len; i++) {
		if (window.stackNames[i].indexOf("_comm_") > -1 || window.stackNames[i].indexOf("_talk_") > -1 || window.stackNames[i].indexOf("_dept_") > -1 || window.stackNames[i].indexOf("_crit_") > -1 || window.stackNames[i].indexOf("_fiction_") > -1) {
			try {
				var condeNetXML = window.condenetDirectory.resolvePath(window.xmlNames[i]+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(condeNetXML, air.FileMode.READ);
				var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
				fileStream.close();
				var danvilleElements = danvilleElements+condeNetXMLStr.slice(condeNetXMLStr.indexOf("<articleelements>")+18,condeNetXMLStr.indexOf("</articleelements>"));
			} catch(err) {}
		}
	}
	var finalImagenames = [];
	var finalImageCaptions = [];
	$(danvilleElements).find("imagename").each(function(index) {
		var imagename = $(this).text().toLowerCase();
		var imagetype = $(danvilleElements).find("type")[index].textContent;
		if (imagetype == "element_cartoon") {
			if (imagename.charAt(0) === "a" && !isNaN(imagename.charAt(1))) {
				finalImagenames.push(imagename);
				try {
					finalImageCaptions.push($(danvilleElements).find("elementcaption")[index].textContent);
				} catch(err) {
					finalImageCaptions.push("");
				}
			}
		}
	});

	var finalElementsHTML = "";
	for (var i=0, len=finalImagenames.length; i<len; i++) {
		var theCaption = finalImageCaptions[i].replace(new RegExp("”", 'g'), "&#8221;").replace(new RegExp("“", 'g'), "&#8220;").replace(new RegExp("‘", 'g'), "&#8216;").replace(new RegExp("’", 'g'), "&#8217;").replace(new RegExp(';""', 'g'), ';"').replace(new RegExp('\r""', 'g'), '"').replace(new RegExp('"""', 'g'), '""');
		theCaption = theCaption.replace(new RegExp("\n", 'g'), "")
		finalElementsHTML=finalElementsHTML+',\n\t\t{ "order" : "'+i+'", "name":"'+finalImagenames[i]+'", "src" : "../media/cartoons/'+theDate+'_'+finalImagenames[i]+'.jpg", "caption" : "'+theCaption+'"}';
	}

	finalElementsHTML = 'var cartoonsData = {"cartoons": [ '+finalElementsHTML.slice(1)+'\n ] }';
	finalElementsHTML = finalElementsHTML.replace(new RegExp('"""', 'g'), '""').replace(new RegExp(';""', 'g'), ';"').replace(new RegExp('; ""', 'g'), ';"');
	finalElementsHTML = finalElementsHTML.replace(new RegExp('"......&#8220;', 'g'), '"\&#8220;');
	finalElementsHTML = finalElementsHTML.replace(new RegExp('&#8221;......""', 'g'), '&#8221;"');
	finalElementsHTML = finalElementsHTML.replace(new RegExp('&#8221;......"', 'g'), '&#8221;"');
	return finalElementsHTML;
}

var transformCartoonsStack = function(stackName,rootDirectory,callback) {
	danvilleElements = "";
	for (var i=0, len=window.stackNames.length; i<len; i++) {
		if (window.stackNames[i].indexOf("_comm_") > -1 || window.stackNames[i].indexOf("_talk_") > -1 || window.stackNames[i].indexOf("_dept_") > -1 || window.stackNames[i].indexOf("_crit_") > -1 || window.stackNames[i].indexOf("_fiction_") > -1) {
			try {
				var condeNetXML = window.condenetDirectory.resolvePath(window.xmlNames[i]+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(condeNetXML, air.FileMode.READ);
				var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
				fileStream.close();
				var danvilleElements = danvilleElements+condeNetXMLStr.slice(condeNetXMLStr.indexOf("<articleelements>")+18,condeNetXMLStr.indexOf("</articleelements>"));
				if (danvilleElements.split("cartoon").length > 1) {
					i = window.stackNames.length;
				}
			} catch(err) {}
		}
	}
	var finalImagenames = [];
	var finalImageCaptions = [];
	$(danvilleElements).find("imagename").each(function(index) {
		var imagename = $(this).text().toLowerCase();
		var imagetype = $(danvilleElements).find("type")[index].textContent;
		if (imagetype == "element_cartoon") {
			finalImagenames.push(imagename);
			try {
				finalImageCaptions.push($(danvilleElements).find("elementcaption")[index].textContent);
			} catch(err) {
				finalImageCaptions.push("");
			}
		}
	});
	
	finalHTML = window.cartoonStackTemplate.replace(new RegExp('<!--insert caption here-->', 'g'), finalImageCaptions[0]);
	finalHTML = finalHTML.replace(new RegExp('<!--insert image here-->', 'g'), finalImagenames[0]);
	finalHTML = finalHTML.replace(new RegExp('<!--insert date here-->', 'g'), theDate);

	callback(finalHTML);
}


// Note that all of these transform functions can be found in stacks.js
var transformTOCToHTML = function(condeNetXMLStr,stackName,rootDirectory,callback) {

	var tocDepts = "";
	var tocCrits ="";
	var tocCover ="";
	var tocDeptCount = 0;
	for (var i=0, len=window.stackNames.length; i<len; i++) {
		if (window.stackNames[i].indexOf("_comm_") > -1 || window.stackNames[i].indexOf("_talk_") > -1 || window.stackNames[i].indexOf("_dept_") > -1 || window.stackNames[i].indexOf("_crit_") > -1 || window.stackNames[i].indexOf("_fiction_") > -1 || window.stackNames[i].indexOf("_shouts_") > -1 || window.stackNames[i].indexOf("_poem_") > -1 || window.stackNames[i].indexOf("_cover_") > -1) {
			try {
				var condeNetXML = window.condenetDirectory.resolvePath(window.xmlNames[i]+".xml");
				var fileStream = new air.FileStream();
				fileStream.open(condeNetXML, air.FileMode.READ);
				var condeNetXMLStr = fileStream.readMultiByte(condeNetXML.size, air.File.systemCharset);
				fileStream.close();

				var parser = new DOMParser();
				var XML = parser.parseFromString(condeNetXMLStr,"text/xml");

				var theStackname = getXMLTagInfo(XML,"stackname");
				var theAuthor = getXMLTagInfo(XML,"author");
				var theRubric = getXMLTagInfo(XML,"subhead");
				var theTitle = getXMLTagInfo(XML,"title");
				var theVolume = getXMLTagInfo(XML,"volumenumber");
				var theIssue = getXMLTagInfo(XML,"issuenumber");

				// check for multimedia
				var theMultimedia = condeNetXMLStr.slice(condeNetXMLStr.indexOf("<tabletmultimediaextras>")+25,condeNetXMLStr.indexOf("</tabletmultimediaextras>"));
				var theMultimediaTypes = [theMultimedia.split("<type_1>")[1].split("</type_1>")[0],theMultimedia.split("<type_2>")[1].split("</type_2>")[0],theMultimedia.split("<type_3>")[1].split("</type_3>")[0],theMultimedia.split("<type_4>")[1].split("</type_4>")[0],theMultimedia.split("<type_5>")[1].split("</type_5>")[0]];
				// var theMultimediaTouts = [theMultimedia.split("<tout_1>")[1].split("</tout_1>")[0],theMultimedia.split("<tout_2>")[1].split("</tout_2>")[0],theMultimedia.split("<tout_3>")[1].split("</tout_3>")[0],theMultimedia.split("<tout_4>")[1].split("</tout_4>")[0],theMultimedia.split("<tout_5>")[1].split("</tout_5>")[0]];
				var theToutIcons = "",
					theTouts = "";
				for (var toutCount=0; toutCount<5; toutCount++) {
					if (theMultimediaTypes[toutCount].length>1) {
						// if (toutCount === 0) theMultimediaTouts[toutCount] = "Plus: " + theMultimediaTouts[toutCount];
						theTouts = "\t\t\t\t\t\t<h6>Plus: Multimedia tout TK.</h6>\r";
						theToutIcons += "\t\t\t\t\t\t<span class='icon-"+theMultimediaTypes[toutCount].toLowerCase().replace(new RegExp(' ', 'g'), "")+" grey'></span>\r";
					}
				}

				// construct html for this entry in the toc
				if (theStackname.indexOf("_dept_") > 0) {
					var currentToc = window.tocDept;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocDeptCount++
					if (tocDeptCount == 3) {
						tocDepts = tocDepts+"\r<hr>\r"+currentToc;
					} else {
						tocDepts = tocDepts+"\r"+currentToc;
					}
					
				} else if (theStackname.indexOf("_shouts_") > 0) {
					var currentToc = window.tocShouts;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons + '<span class="icon-weblink red"></span>');
					tocDepts = tocDepts+"\r"+currentToc;
				} else if (theStackname.indexOf("_poem_") > 0) {
					var currentToc = window.tocPoem;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Title TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocDepts = tocDepts+"\r"+currentToc;
				} else if (theStackname.indexOf("_fiction_") > 0) {
					var currentToc = window.tocFiction;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Title TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocDepts = tocDepts+"\r<hr>\r"+currentToc;
				} else if (theStackname.indexOf("_briefly_") > 0) {
					var currentToc = window.tocBriefly;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocCrits = tocCrits+"\r"+currentToc;
				} else if (theStackname.indexOf("_crit_") > 0) {
					var currentToc = window.tocDept;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theRubric);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocCrits = tocCrits+"\r"+currentToc;
				} else if (theStackname.indexOf("_cover_") > 0) {
					var currentToc = window.tocCover;
					currentToc = currentToc.replace(new RegExp("<!--insert stackname here-->", 'g'), theStackname);
					currentToc = currentToc.replace(new RegExp("Rubric TK", 'g'), theRubric);
					currentToc = currentToc.replace(new RegExp("Author TK", 'g'), theAuthor);
					currentToc = currentToc.replace(new RegExp("Title TK", 'g'), theTitle);
					currentToc = currentToc.replace(new RegExp("<!--insert multimedia here-->", 'g'), theTouts + theToutIcons);
					tocCover = currentToc;
				}

			} catch(err) {}
		}
	}
	

	var theDay = date;
	if ( date < 10 ) {
		theDay = theDay.substr( theDay.length - 1 );
	}

	var theFormattedDate = months[month-1]+" "+theDay+", "+year;

	danvilleHTML = window.tocTemplate;
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert date here-->", 'g'), theDate);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert month here-->", 'g'), pad(month));
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert year here-->", 'g'), pad(year));
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert day here-->", 'g'), theDay);
	danvilleHTML = danvilleHTML.replace(new RegExp("<!--insert formatted date here-->", 'g'), theFormattedDate);
	danvilleHTML = danvilleHTML.replace("<!--insert toc depts here-->", tocDepts);
	danvilleHTML = danvilleHTML.replace("<!--insert toc crits here-->", tocCrits);
	danvilleHTML = danvilleHTML.replace("<!--insert cover here-->", window.tocCover);
	danvilleHTML = danvilleHTML.replace("<!--insert volume number here-->", romanize(theVolume));
	danvilleHTML = danvilleHTML.replace("<!--insert issue number here-->", theIssue);
	
	// Output final HTML for the Digital Danville
	callback(danvilleHTML);
}

module.exports = transformations;