// Database
var mongo = require('mongoskin');
var paths = require('dewm-paths');
var db = mongo.db(paths.mongo.host+paths.mongo.db, {native_parser:true, safe:true});
var http = require('http');
var apn = require('apn');

var utils = { mongo:{}, notifications:{}, format:{date:{},stack:{}}, xml:{} };

// Prototype functions
String.prototype.splice = function( idx, rem, s ) {
    return (this.slice(0,idx) + s + this.slice(idx + Math.abs(rem)));
};

utils.format.pad = function(n, width, z) {
	z = z || '0';
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

utils.format.date.stack = function(stack) {
	if 		(parseInt(stack.split("_")[4])>0) { var stackDate = parseInt(stack.split("_")[4]); }
	else if (parseInt(stack.split("_")[3])>0) { var stackDate = parseInt(stack.split("_")[3]); }
	else if (parseInt(stack.split("_")[2])>0) { var stackDate = parseInt(stack.split("_")[2]); }
	return String(stackDate);
}

utils.format.date.hyphen = function(dateToFormat) {
	d = Array(5);
	d[0] = dateToFormat;
	var year = utils.format.pad(d[0].getFullYear(),2).substring(2);
	var month = utils.format.pad(d[0].getMonth()+1,2);
	var date = utils.format.pad(d[0].getDate(),2);
	d[1] = year+month+date;
	d[2] = year+"-"+month+"-"+date;
	d[3] = utils.months[d[0].getMonth()]+" "+d[0].getDate()+", "+d[0].getFullYear();
	return(d);
};

utils.format.date.roman = function(num) {
	if (!+num) { return false; }
	var digits = String(+num).split(""),
		key = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"],
		roman = "",
		i = 3;
	while (i--) { roman = (key[+digits.pop() + (i * 10)] || "") + roman; };
	return Array(+digits.join("") + 1).join("M") + roman;
}

utils.format.date.object = function(dateToParse) {
	if (dateToParse.indexOf("-")>0) { dateToParse = dateToParse.split("-"); } 
	else { dateToParse = dateToParse.split(/(?=(?:..)*$)/); }
	return(new Date("20"+dateToParse[0],parseInt(dateToParse[1])-1,dateToParse[2]) );
};

utils.format.date.archive = function(name) {
	var months = ["January","February","March","April","May","June","July","August","September","October","November","December"]
	var archiveYear = name.split("-")[1];
	if (name.split("-")[2][0] == 0) {
		var archiveMonth = months[parseInt(name.split("-")[2][1])-1];
	} else {
		var archiveMonth = months[parseInt(name.split("-")[2])-1];
	}
	if (name.split("-").length == 4) {
		var archiveDay = parseInt(name.split("-")[3]);
	} else {
		var archiveDay = parseInt(name.split("-")[3])+" &#38; "+parseInt(name.split("-")[4]);
	}
	if (name.split("-").length == 7) {
		dateA = getArchiveDate("test-"+name.split("-")[1]+name.split("-")[2]+name.split("-")[3]);
		dateA = getArchiveDate("test-"+name.split("-")[4]+name.split("-")[5]+name.split("-")[6]);
		return dateA+" &#38; "+dateB;
	}
	return (archiveMonth+" "+archiveDay+", "+archiveYear);
};

utils.format.stack.trim = function(stack) {
	return stack.split("_").splice(1).join("_");
};

utils.xml.tags = function(XML,tag) {
	var result = XML.getElementsByTagName(tag);
	if (result[0] != undefined && result[0].childNodes[0] != undefined && result[0].childNodes[0].nodeValue != undefined) {
		return result[0].childNodes[0].nodeValue;
	} else {
		return "";
	};
};

utils.mongo.upsert = function(database,documents,field,property,callback) {
	if (!field) { var field="", property=""; }
	if (documents.length>0) {
		db.collection(database,function(err,collection) {
			var bulk = collection.initializeUnorderedBulkOp();
			for (var i = 0; i < documents.length; i++) {
				var query = {};
				query[field] = documents[i][property];
				bulk.find(query).upsert().update({ $set: documents[i] });
			}
			bulk.execute(function(err,result) {
				if (err) { console.log(err) } 
				else { 
					var added=[];
					if (parseInt(result.nUpserted)>0) {
						var addedIds = result.getUpsertedIds();
						for (var i=0; i<addedIds.length; i++) {
							added.push(documents[addedIds[i].index].stack)
						}
						console.log("Added "+result.nUpserted+" "+database+" to MongoDB.")
					}
					if (parseInt(result.nModified)>0) {
						console.log("Updated "+result.nModified+" "+database+" in MongoDB.")
					}
					if (callback) { callback(added); }
				};
			});    
	    });	
	};
};

utils.mongo.insert = function(database,additions,existing,callback) {
	db.collection(database,function(err,collection) {
		var bulk = collection.initializeUnorderedBulkOp();
		for (var i=0; i < additions.length; i++) {
			if (existing.indexOf(additions[i])==-1) {
				bulk.insert(additions[i]);
			}
		};
		bulk.execute(function(err,result) {
			if (err) { console.log(err) } 
			else { 
				if (parseInt(result.nInserted)>0) { console.log("Added "+result.nInserted+" "+database+" to MongoDB.") }
				if (callback) { callback(result); }
			};
		});    
    });	
}

utils.mongo.update = function(database,query,update,callback) {
	db.collection(database).update(query,update,function (err, result) {
		if (err) { console.log(err); }
		else if (parseInt(result)>0) { console.log("Updated "+result+" "+database+" in MongoDB."); }
	});
}

utils.mongo.find = function(database,query,display,callback) {
	if (!display) { var display={} };
	db.collection(database).find(query,display).toArray(function (err,items) {
		if (callback) { callback(err,items); }
	});
}

utils.mongo.remove = function(database,query) {
	db.collection(database).remove(query,function (err, result) {
		if (err) { console.log(err); }
		else if (parseInt(result)>0) { console.log("Deleted "+result+" "+database+" from MongoDB."); }
	});
}

utils.mongo.check = function(actions,callback) {
	var self=this,
		change={};
	db.collection("stacks",function(err,collection) {
		var bulk = collection.initializeUnorderedBulkOp();
		for (var stack in actions) {
			var action = actions[stack];
			if (action === false) {
				bulk.find({stack:stack}).remove();
			} else if (action === true) {
				var date=utils.format.date.stack(stack),
					d=dewm.dates.strings.indexOf(date),
					i=dewm.weeks[d].files.indexOf(stack);
				bulk.insert(dewm.weeks[d].stacks[i]);
			} else {
				bulk.find({stack:stack}).update({ $set: {stack:action}});
				change[stack]=action;
			};
		};
		bulk.execute(function(err,result) {
			if (err) { console.log(err) } 
			else if (callback) { callback(result); }
			if ( Object.keys(change).length>0 ) { 
				utils.updateStacks("comments",change); 
				utils.updateStacks("assignments",change); 
			}
		});
    });
}

utils.notifications.all = function(message,url) {
	var data = JSON.stringify({alert:message,url:url});
	var options = {
		host: 'go.goroost.com',
		path: '/api/push/',
		method: 'POST',
		auth: "15120f12cdc6420dbbbd09cc780f4145:8f6cf36adcaa42479803ba2dab72d2ee",
		headers: {'Content-Type': 'application/json'}
	};
	var req = http.request(options, function(res) {
		res.on('data', function (chunk) {console.log('Response: ' + chunk);});
	});
	req.on('error', function(e) { console.log('problem with request: ' + e.message);});
	req.write(data);
	req.end();
}

utils.notifications.user = function(message,url,user) {
	var data = JSON.stringify({alert:message,url:url});
	var options = {
		host: 'go.goroost.com',
		path: '/api/push/',
		method: 'POST',
		auth: "15120f12cdc6420dbbbd09cc780f4145:8f6cf36adcaa42479803ba2dab72d2ee",
		headers: {'Content-Type': 'application/json'}
	};
	var req = http.request(options, function(res) {
		res.on('data', function (chunk) {console.log('Response: ' + chunk);});
	});
	req.on('error', function(e) { console.log('problem with request: ' + e.message);});
	req.write(data);
	req.end();
}

utils.comments = function(callback,stack,type) {
	var query = {};
	if (stack && type) { query={stack:stack, type:type} };
	db.collection('comments').find(query).toArray(function (err, items) {
		if (err) {
			console.log(err);
		} else {
			for (var i=0; i<items.length; i++) {
				if (items[i].username in dewm.users) {
					items[i].name = dewm.users[items[i].username].name;
				} else {
					items[i].name = null;
				}
			};
			callback(items);
		}
	});
}

utils.commentsFilter = function(comments,stack,type) {
	var returnComments = [];
    for (var i=0; i<comments.length; i++) {
        if (comments[i].stack==stack && comments[i]["type"]==type) {
            returnComments.push(comments[i])
        }
    }
    return returnComments;
}

utils.updateStacks = function(collection,changes) {
	db.collection(collection,function(err,collection) {
		var bulk = collection.initializeUnorderedBulkOp();
		for (var o in changes) {
			var n = changes[o];
			bulk.find({stack:o}).update({ $set: {stack:n}});
		};
		bulk.execute(function(err,result) { if (err) { console.log(err) }  });
	});
}

utils.generateUserDict = function() {
	var userDict={};
	this.mongo.find("users",{},{username:1,fname:1,lname:1,access:1},function(err,users){
		for (var i=0; i<users.length; i++) {
			userDict[users[i].username]={
				name:users[i].fname+" "+users[i].lname,
				dept:dewm.depts[users[i].access],
				username:users[i].username
			};
		}
		dewm.users=userDict;
	})
};

utils.checkReader = function(stack,username,status) {
	utils.mongo.find("assignments",{stack:stack},{},function(err,items) {
		var assignments = items[0],
			reader = null;
		for (var i=0; i<assignments.copy.readers.length; i++) {
			if (assignments.copy.readers[i].username==username) {
				reader=i;
				console.log(dewm.users[assignments.copy.readers[i].username].name+" is now reading "+stack+".")
				break;
			};
		};
		if (reader!==null) {
			var update={$set:{}};
			update["$set"]["copy.readers."+reader+".active"]=status;
			utils.mongo.update("assignments",{stack:stack},update);
		};
	});
};

utils.diff = function(a,b) {
	return b.filter(function(i) {return a.indexOf(i) < 0;});
}

utils.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

module.exports = utils;