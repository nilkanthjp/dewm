// Database
var mongo = require('mongoskin');
var db = mongo.db("mongodb://dewm:27017/dewm", {native_parser:true, safe:true});
var http = require('http');

var utils = { mongo:{}, notifications:{} };

utils.pad = function(n, width, z) {
	z = z || '0';
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

utils.dateFromStack = function(stack) {
	if 		(parseInt(stack.split("_")[4])>0) { var stackDate = parseInt(stack.split("_")[4]); }
	else if (parseInt(stack.split("_")[3])>0) { var stackDate = parseInt(stack.split("_")[3]); }
	else if (parseInt(stack.split("_")[2])>0) { var stackDate = parseInt(stack.split("_")[2]); }
	return String(stackDate);
}

utils.formatDate = function(dateToFormat) {
	d = Array(5);
	d[0] = dateToFormat;
	var year = utils.pad(d[0].getFullYear(),2).substring(2);
	var month = utils.pad(d[0].getMonth()+1,2);
	var date = utils.pad(d[0].getDate(),2);
	d[1] = year+month+date;
	d[2] = year+"-"+month+"-"+date;
	d[3] = utils.months[d[0].getMonth()]+" "+d[0].getDate()+", "+d[0].getFullYear();
	return(d);
}

utils.createDateObject = function(dateToParse) {
	if (dateToParse.indexOf("-")>0) { dateToParse = dateToParse.split("-"); } 
	else { dateToParse = dateToParse.split(/(?=(?:..)*$)/); }
	return(new Date("20"+dateToParse[0],parseInt(dateToParse[1])-1,dateToParse[2]) );
}

utils.mongo.add = function(database,documents,field,property,callback) {
	if (!field) { var field="", property=""; }
	if (documents.length>0) {
		db.collection(database,function(err,collection) {
			var bulk = collection.initializeUnorderedBulkOp();
			for (var i = 0; i < documents.length; i++) {
				var query = {};
				query[field] = documents[i][property];
				bulk.find(query).upsert().update({ $set: documents[i] });
			}
			bulk.execute(function(err,result) {
				if (err) { console.log(err) } 
				else { 
					if (result.nUpserted>0) {
						var addedIds = result.getUpsertedIds()
							added=[];
						for (var i=0; i<addedIds.length; i++) {
							added.push(documents[addedIds[i].index].stack)
						}
						callback(added);
					} else {
						callback();
					}
				} 
			});    
	    });	
	}
}

utils.mongo.find = function(database,query,callback) {
	db.collection(database).find(query).toArray(function (err,items) {
		callback(err,items);
	});
}

utils.mongo.remove = function(database,query) {
	db.collection(database).remove(query,function (err, result) {
		if (err) { console.log(err); }
		else { console.log("Deleted "+result+" "+database+" from MongoDB."); }
	});
}

utils.notifications.push = function(data) {
	var data = JSON.stringify(data);
	var options = {
		host: 'go.goroost.com',
		path: '/api/push/',
		method: 'POST',
		auth: "15120f12cdc6420dbbbd09cc780f4145:8f6cf36adcaa42479803ba2dab72d2ee",
		headers: {'Content-Type': 'application/json'}
	};
	var req = http.request(options, function(res) {
		res.on('data', function (chunk) {console.log('Response: ' + chunk);});
	});
	req.on('error', function(e) { console.log('problem with request: ' + e.message);});
	req.write(data);
	req.end();
}

utils.comments = function(callback,stack,type) {
	var query = {};
	if (stack && type) { query={stack:stack, type:type} };
	db.collection('comments').find(query).toArray(function (err, items) {
		if (err) {
			console.log(err);
		} else {
			var usernames = [];
			for (var i=0; i<items.length; i++) {
				usernames.push(items[i].username);
			}
			db.collection('userlist').find({username:{ $in: usernames }}).toArray(function (err, users) {
				var usernameDict = {};
				for (var i=0; i<users.length; i++) {
					usernameDict[users[i].username] = users[i].fname+" "+users[i].lname;
				};
				for (var i=0; i<items.length; i++) {
					items[i].name = usernameDict[items[i].username];
				};
				callback(items);
			});
		}
	});
}

utils.commentsFilter = function(comments,stack,type) {
	var returnComments = [];
    for (var i=0; i<comments.length; i++) {
        if (comments[i].stack==stack && comments[i]["type"]==type) {
            returnComments.push(comments[i])
        }
    }
    return returnComments;
}

utils.updateStack = function(o,n) {
	db.collection('comments').update({stack:o},{$set:{stack:n}},{multi:true}).toArray(function (err, result) {
		if (err) {
			console.log(err);
		} else {
			console.log(result)
		}
	});
}

utils.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

module.exports = utils;